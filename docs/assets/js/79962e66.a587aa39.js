"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[50],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=o,y=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return t?i.createElement(y,r(r({ref:n},p),{},{components:t})):i.createElement(y,r({ref:n},p))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9895:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=t(7462),o=(t(7294),t(3905));const a={sidebar_position:4},r="Elementy \u015bwiata",s={unversionedId:"Rozwini\u0119cie/Elementy-swiata",id:"Rozwini\u0119cie/Elementy-swiata",title:"Elementy \u015bwiata",description:"\u015bwiat",source:"@site/docs/2-Rozwini\u0119cie/4-Elementy-swiata.md",sourceDirName:"2-Rozwini\u0119cie",slug:"/Rozwini\u0119cie/Elementy-swiata",permalink:"/StatkiTSDocs/docs/Rozwini\u0119cie/Elementy-swiata",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-Rozwini\u0119cie/4-Elementy-swiata.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Symulator czasu rzeczywistego",permalink:"/StatkiTSDocs/docs/Rozwini\u0119cie/Symulator-Czasu-rzeczysistego"},next:{title:"Podsumowanie",permalink:"/StatkiTSDocs/docs/3 Zako\u0144czenie/Podsumowanie"}},l={},c=[{value:"\u015bwiat",id:"\u015bwiat",level:2},{value:"Wybrane Elementy \u015bwiata",id:"wybrane-elementy-\u015bwiata",level:3},{value:"Position",id:"position",level:4},{value:"ViewPoint",id:"viewpoint",level:4},{value:"DynamicElement",id:"dynamicelement",level:4},{value:"Stabilno\u015b\u0107 modelu dynamiki",id:"stabilno\u015b\u0107-modelu-dynamiki",level:5},{value:"Po\u0142\u0105czenie <code>DynamicElement</code>+ <code>Position</code>+ <code>ViewPoint</code>",id:"po\u0142\u0105czenie-dynamicelement-position-viewpoint",level:4},{value:"SpringInteraction",id:"springinteraction",level:4},{value:"Spr\u0119\u017cyna",id:"spr\u0119\u017cyna",level:5},{value:"T\u0142umik",id:"t\u0142umik",level:5},{value:"Implementacja:",id:"implementacja",level:5},{value:"Dodanie Elementu springInteraction do \u015bwiata",id:"dodanie-elementu-springinteraction-do-\u015bwiata",level:4},{value:"PositionRotation",id:"positionrotation",level:4},{value:"ViewTexture",id:"viewtexture",level:4},{value:"Triangel",id:"triangel",level:4},{value:"Przyk\u0142ad",id:"przyk\u0142ad",level:5},{value:"FluidInteractor",id:"fluidinteractor",level:4},{value:"Ship",id:"ship",level:4},{value:"Kad\u0142ub",id:"kad\u0142ub",level:5},{value:"\u017bagiel",id:"\u017cagiel",level:5},{value:"Ster",id:"ster",level:5},{value:"Collisions",id:"collisions",level:4}],p={toc:c},m="wrapper";function d(e){let{components:n,...a}=e;return(0,o.kt)(m,(0,i.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"elementy-\u015bwiata"},"Elementy \u015bwiata"),(0,o.kt)("h2",{id:"\u015bwiat"},"\u015bwiat"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Elementy \u015bwiata")," posiadaj\u0105 referencje do innych element\xf3w \u015bwiata. Tworz\u0105 w ten spos\xf3b struktur\u0119 danych (\u015bwiat).\nTak wygl\u0105da diagram klas Element\xf3w \u015bwiata:\n",(0,o.kt)("img",{src:t(9557).Z,width:"2308",height:"744"})),(0,o.kt)("p",null,"Og\xf3lnym za\u0142o\u017ceniem jest stworzenie symulacji w kt\xf3rej model fizyczny jest zbudowany z moleku\u0142\xf3w, kt\xf3re s\u0105 zwi\u0105zana oddzia\u0142ywaniami (",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Soft-body_dynamics"},"Soft-body dynamics"),"). Dzi\u0119ki temu elementy statku b\u0119d\u0105 mog\u0142y bardziej realistycznie si\u0119 zachowywa\u0107 np.\u017cagiel wygina\u0107 przy silnym wietrze .   "),(0,o.kt)("h3",{id:"wybrane-elementy-\u015bwiata"},"Wybrane Elementy \u015bwiata"),(0,o.kt)("h4",{id:"position"},"Position"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Position {\n    value: Vector2 = new Vector2(0, 0);\n    constructor(value: Vector2 = new Vector2(0, 0)) {\n    this.value = value;\n    }\n}\n")),(0,o.kt)("p",null,"Pozycja jest tylko dan\u0105, nie posiada metod."),(0,o.kt)("h4",{id:"viewpoint"},"ViewPoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class ViewPoint implements View {\n    readonly position: Position;\n    readonly circle: THREE.Mesh;\n\n    constructor(position: Position) {\n        this.position = position;\n\n        const geometry = new THREE.CircleGeometry(5, 32);\n        const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n        this.circle = new THREE.Mesh(geometry, material);\n        views.addView(this)\n    }\n\n\n    get3DObject(): THREE.Object3D<THREE.Event> {\n        return this.circle;\n    }\n    update(): void {\n        this.circle.position.set(this.position.value.x, this.position.value.y, 0);\n    }\n    destroy(): void {\n        views.removeView(this);\n    }\n}\n")),(0,o.kt)("p",null,"Ten element przechowuje informacje potrzebne do renderowania obiektu na ekranie. ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," 't\u0142umaczy' z pozycj\u0119 elementu zapisanego w formie wykorzystywanej prze inne elementy tego systemu do zrozumia\u0142ej przez ",(0,o.kt)("inlineCode",{parentName:"p"},"Three.js"),".   "),(0,o.kt)("h4",{id:"dynamicelement"},"DynamicElement"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class DynamicElement {\n    force = new Vector2(0, 0);\n    mass = 1;\n    acceleration = new Vector2(0, 0);\n    velocity = new Vector2(0, 0);\n    position: Position\n\n    viewPoint: ViewPoint // na potrzeby test\xf3w\n\n    constructor(position: Position, mass: number = 1) {\n        this.mass = mass;\n        this.position = position;\n\n        this.viewPoint = new ViewPoint(position);\n\n        dynamicElements.addElement(this);\n    }\n\n    update(dt: number) {\n        this.acceleration = this.force.clone().divideScalar(this.mass);\n        this.velocity.add(this.acceleration.clone().multiplyScalar(dt));\n        this.position.value.add(this.velocity.clone().multiplyScalar(dt));\n\n        this.force = new Vector2(0, 0);\n    }\n\n    remove() {\n        dynamicElements.removeElement(this);\n    }\n\n    getMomentum() {\n        return this.velocity.clone().multiplyScalar(this.mass);\n    }\n}\n")),(0,o.kt)("p",null,"Jest to jeden z wa\u017cniejszych element\xf3w \u015bwiata. Przechowuje on informacje o pr\u0119dko\u015bci, przyspieszeniu, masie, p\u0119dzie i sile, kt\xf3ra dzia\u0142a na element. metoda ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," dokonuje ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Numerical_integration#Reasons_for_numerical_integration"},"integracji numerycznej")," ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Equations_of_motion"},"r\xf3wna\u0144 ruchu")," W ten spos\xf3b oblicza nowe warto\u015bci swoich atrybut\xf3w. Ten Obiekt nie implementuje ",(0,o.kt)("inlineCode",{parentName:"p"},"WorldElements")," poniewa\u017c korzysta ze zmodyfikowanej metody ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," kt\xf3ra przyjmuje argument ",(0,o.kt)("inlineCode",{parentName:"p"},"dt")," (delta time) czyli zmiana jaka b\u0119dzie u\u017cyta w integracji.\nNale\u017cy uwa\u017ca\u0107 na prawid\u0142ow\u0105 warto\u015b\u0107 ",(0,o.kt)("inlineCode",{parentName:"p"},"dt"),". Zbyt ma\u0142a mo\u017ce spowodowa\u0107 problemy z wydajno\u015bci\u0105, a zbyt du\u017ca mo\u017ce spowodowa\u0107 destabilizacje modelu dynamicznego tzn. model przestanie zachowywa\u0107 sta\u0142e ruchu takie jak: zachowanie p\u0119du, czy energii w skutek czego model si\u0119 'rozpadnie'."),(0,o.kt)("h5",{id:"stabilno\u015b\u0107-modelu-dynamiki"},"Stabilno\u015b\u0107 modelu dynamiki"),(0,o.kt)("p",null,"Model jest stabilny, je\u017celi zachowuje p\u0119d"),(0,o.kt)("p",null,"P\u0119d jest sta\u0142y, je\u017celi ",(0,o.kt)("inlineCode",{parentName:"p"},"dt")," jest dostatecznie ma\u0142e. Istnieje takie ",(0,o.kt)("inlineCode",{parentName:"p"},"dtMax")," poni\u017cej, kt\xf3rego system jest stabilny.  Jak podaje Wikipedia ",(0,o.kt)("inlineCode",{parentName:"p"},"dtMax")," jest zwi\u0105zane z najwi\u0119ksz\u0105 cz\u0119sto\u015bci\u0105 drgania kt\xf3regokolwiek moleku\u0142a systemu. ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Energy_drift"},"Energy Drift")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dtMax = 2^(1/2)/omega\n")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://wikimedia.org/api/rest_v1/media/math/render/svg/2ce85b09695b0dbc73db5971451e712ed4f9f114",alt:"{\\displaystyle \\Delta t<{\\frac {\\sqrt {2}}{\\omega }}\\approx 0.225p}"})),(0,o.kt)("p",null,"Omega jest sta\u0142a, je\u017celi oddzia\u0142ywania si\u0119 nie zmieniaj\u0105, to znaczy nie powstaj\u0105 i nie znikaj\u0105 nowe obiekty klasy ",(0,o.kt)("inlineCode",{parentName:"p"},"Interaction"),". Omega jest r\xf3wna "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"omega = (k/m)^(1/2)\n")),(0,o.kt)("p",null,"gdzie:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"k")," - wsp\xf3\u0142czynnik spr\u0119\u017cysto\u015bci"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"m")," - masa")),(0,o.kt)("p",null,"Dla cz\u0105stek, kt\xf3re podlegaj\u0105 wielu oddzia\u0142ywaniom, zsumuj\u0119 wsp\xf3\u0142czynnik spr\u0119\u017cysto\u015bci, tak jak by spr\u0119\u017cyny by\u0142y po\u0142\u0105czone r\xf3wnolegle."),(0,o.kt)("p",null,"Teraz znajduj\u0119 najwi\u0119ksz\u0105 omeg\u0119 i na jej podstawie wyznaczam ",(0,o.kt)("inlineCode",{parentName:"p"},"dtMax")," poni\u017cej kt\xf3rej system jest stabilny.\nCiekawe \ud83e\udd14, \u017ce to dzia\u0142a:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"test('momentum conservation for for wsp = 2^(1/2)', () => {\n        // molecular model is stable (conservation of momentum) if dt< wsp /omegaMax\n        // where omegaMax is the highest oscilation frequency of the molecul in the system \n        // according to Wikipedia wsp should be 2^(1/2)\n        dynamicElement1.velocity = new Vector2(10, 0);\n        dynamicElement2.mass = 10000000;\n        \n        for (let i = 1; i < 1000; i++) {\n            interaction.springRate = Math.random() * 1000;\n            dynamicElement1.mass = Math.random() * 1000;\n            dynamicElement2.mass = Math.random() * 1000;\n            dynamicElement1.velocity = new Vector2(10, Math.random() * 1000);\n            let maximumDt = calculatemaximumDt(interaction.springRate, dynamicElement1.mass, dynamicElement2.mass);\n            maximumDt *= 1;\n            let momentum0 = dynamicElement1.getMomentum().add(dynamicElement2.getMomentum());\n            for (let i = 0; i < 10000; i++) {\n                interaction.update();\n                dynamicElementUpdater.update(maximumDt);\n            }\n            let momentum1 = dynamicElement1.getMomentum().add(dynamicElement2.getMomentum());\n            expect(momentum0.distanceTo(momentum1) <= 0.01 * momentum0.length()).toBeTruthy();\n        }\n    });\n")),(0,o.kt)("p",null,"Je\u017celi ",(0,o.kt)("inlineCode",{parentName:"p"},"maximumDt")," pomno\u017c\u0119, chocia\u017c przez ",(0,o.kt)("inlineCode",{parentName:"p"},"1.1")," to system przestaje by\u0107 stabilny. \ud83d\udc4f"),(0,o.kt)("h4",{id:"po\u0142\u0105czenie-dynamicelement-position-viewpoint"},"Po\u0142\u0105czenie ",(0,o.kt)("inlineCode",{parentName:"h4"},"DynamicElement"),"+ ",(0,o.kt)("inlineCode",{parentName:"h4"},"Position"),"+ ",(0,o.kt)("inlineCode",{parentName:"h4"},"ViewPoint")),(0,o.kt)("p",null,"Je\u017celi po\u0142\u0105cz\u0119 te trzy elementy otrzymam obiekt kt\xf3ry mo\u017ce przesuwa\u0107 si\u0119 (by\u0107 przesuwany?) po ekranie."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"...\nconst position = new Position(new Vector2(0, 0));\nconst dynamicElement = new DynamicElement(position);\nconst viewPoint = new ViewPoint(position);\ndynamicElement.velocity = new Vector2(1, 0);\n...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"gif\n")),(0,o.kt)("p",null,"Obiekt ",(0,o.kt)("inlineCode",{parentName:"p"},"position")," jest jak komunikator kt\xf3ry umo\u017cliwia wsp\xf3\u0142prace pomi\u0119dzy ",(0,o.kt)("inlineCode",{parentName:"p"},"dynamicElement"),"(nadpisuje ",(0,o.kt)("inlineCode",{parentName:"p"},"position"),"), a viewPoint(wy\u015bwietla na podstawie ",(0,o.kt)("inlineCode",{parentName:"p"},"position"),")."),(0,o.kt)("h4",{id:"springinteraction"},"SpringInteraction"),(0,o.kt)("p",null,"obiekty klasy ",(0,o.kt)("inlineCode",{parentName:"p"},"SpringInteraction")," odpowiadaj\u0105 za powstawanie si\u0142 pomi\u0119dzy elementami dynamicznymi. Ten element \u015bwiata implementuje model spr\u0119\u017cyny i t\u0142umika(",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mass-spring-damper_model"},"Mass-spring-damper model"),"). "),(0,o.kt)("h5",{id:"spr\u0119\u017cyna"},"Spr\u0119\u017cyna"),(0,o.kt)("p",null,"Spr\u0119\u017cyna jest modelowana zgodnie z ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hooke%27s_law"},"prawem Hooke'a"),". Si\u0142a spr\u0119\u017cysto\u015bci jest proporcjonalna do odleg\u0142o\u015bci od punktu r\xf3wnowagi. "),(0,o.kt)("h5",{id:"t\u0142umik"},"T\u0142umik"),(0,o.kt)("p",null,"Bez t\u0142umienia obiekty drga\u0142y by bez przerwy co nie odzwierciedla\u0142o by dobrze rzeczywisto\u015b\u0107. T\u0142umik generuje ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Friction"},"si\u0142\u0119 tarcia")," sta\u0142a co do d\u0142ugo\u015bci. Si\u0142a dzia\u0142a tylko wzd\u0142u\u017c t\u0142umika i jest odwrotnie skierowana jak ruch t\u0142umika."),(0,o.kt)("h5",{id:"implementacja"},"Implementacja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class SpringInteraction implements WorldElement {\n    readonly dynamicElement0: DynamicElement;\n    readonly dynamicElement1: DynamicElement;\n    private distance: number;\n    springRate: number;\n    readonly dumperRate: number;\n\n    // readonly viewLine: ViewLine;\n\n    constructor(dynamicElement0: DynamicElement, dynamicElement1: DynamicElement, springRate?: number, dumperRate?: number, distance?: number) {\n        this.dynamicElement0 = dynamicElement0;\n        this.dynamicElement1 = dynamicElement1;\n        this.springRate = springRate ? springRate : calculateMaxSpringRate(Math.min(dynamicElement0.mass, dynamicElement0.mass), 1);\n        this.dumperRate = dumperRate != undefined ? dumperRate : 0.1;\n        this.distance = distance != undefined ? distance : dynamicElement0.position.value.distanceTo(dynamicElement1.position.value);\n        springInteractions.addElement(this);\n    }\n\n    update(): void {\n        const pointsShift = this.dynamicElement1.position.value.clone().sub(this.dynamicElement0.position.value);\n        const pointDirection = pointsShift.clone().normalize();\n\n        const springForceOn1 = calculateSpringForceOn1(pointsShift, pointDirection, this.springRate, this.distance);\n        // according to third law of Newton\n        const springForceOn2 = springForceOn1.clone().multiplyScalar(-1);\n\n        const velocityShift = this.dynamicElement1.velocity.clone().sub(this.dynamicElement0.velocity);\n        const dumperForceOn1 = calculateDumperForceOn1(velocityShift, this.dumperRate, pointDirection);\n        const dumperForceOn2 = dumperForceOn1.clone().multiplyScalar(-1);\n\n        this.dynamicElement0.force.add(springForceOn1);\n        this.dynamicElement1.force.add(springForceOn2);\n        this.dynamicElement0.force.add(dumperForceOn1);\n        this.dynamicElement1.force.add(dumperForceOn2);\n    }\n\n    ...\n}\n\nfunction calculateSpringForceOn1(pointsShift: Vector2, pointDirection: Vector2, springRate: number, distance: number) {\n    // acording to third law of Newton and spring force\n    // F1 = -F2\n    // F1 = -k * (x1 - x2)    \n    const springNeutral = pointDirection.clone().multiplyScalar(distance);\n    const springShift = pointsShift.clone().sub(springNeutral);\n    const forceOn1 = springShift.clone().multiplyScalar(springRate);\n    return forceOn1;\n}\nfunction calculateDumperForceOn1(velocityShift: Vector2, dumperRate: number, pointDirection: Vector2) {\n    const velocityShiftPointDirection = pointDirection.clone().multiplyScalar(velocityShift.dot(pointDirection));\n    const dumperForceOn1 = velocityShiftPointDirection.clone().multiplyScalar(dumperRate);\n    return dumperForceOn1;\n}\n")),(0,o.kt)("h4",{id:"dodanie-elementu-springinteraction-do-\u015bwiata"},"Dodanie Elementu springInteraction do \u015bwiata"),(0,o.kt)("p",null,"Dodanie do \u015bwiata elementu ",(0,o.kt)("inlineCode",{parentName:"p"},"SpringInteraction")," Sprawia \u017ce elementy ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamicElement")," otrzymuj\u0105 warto\u015b\u0107 si\u0142y kt\xf3ra na nie dzia\u0142\u0105 i z tego mog\u0105 wyznaczy\u0107 przyspieszenie."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const position1 = new Position(new Vector2(0, 0));\nconst dynamicElement1 = new DynamicElement(position1);\nconst viewPoint1 = new ViewPoint(position);\ndynamicElement1.velocity = new Vector2(1, 0);\n\nconst position2 = new Position(new Vector2(100, 0));\nconst dynamicElement2 = new DynamicElement(position2);\nconst viewPoint2 = new ViewPoint(position2);\n\nconst springInteraction = new SpringInteraction(dynamicElement1, dynamicElement2);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"gif\n")),(0,o.kt)("p",null,"Taka konstrukcja sprawi \u017ce obiekty b\u0119d\u0105 porusza\u0107 si\u0119 ruchem harmonicznym t\u0142umionym wzd\u0142u\u017c osi x."),(0,o.kt)("p",null,"W\u0142a\u015bnie te oddzia\u0142ywania definiuj\u0105 jakie mo\u017ce by\u0107 maksymalne ",(0,o.kt)("inlineCode",{parentName:"p"},"dt")," aby model si\u0119 nie rozpad\u0142 o czym ju\u017c ",(0,o.kt)("a",{parentName:"p",href:"#stabilno%C5%9B%C4%87-modelu-dynamiki"},"wspomnia\u0142em"),"."),(0,o.kt)("h4",{id:"positionrotation"},"PositionRotation"),(0,o.kt)("p",null,"Obiekt, kt\xf3ry s\u0142u\u017cy do przechowywania informacji o po\u0142o\u017ceniu i rotacji obiektu(bry\u0142y)\nSk\u0105d si\u0119 bierze rotacja? o tym za chwil\u0119"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class PositionRotation {\n    readonly position: Position = new Position();\n    rotation: Rotation = new Rotation();\n\n    constructor(position?: Position, rotation?: Rotation) {\n        this.position = position || new Position();\n        this.rotation = rotation || new Rotation();\n    }\n};\n\nexport class Rotation {\n    value: number = 0;\n\n    constructor(value?: number) {\n        this.value = value || 0;\n    }\n}\n")),(0,o.kt)("h4",{id:"viewtexture"},"ViewTexture"),(0,o.kt)("p",null,"Element \u015bwiata podobny do ",(0,o.kt)("inlineCode",{parentName:"p"},"ViewPoint")," ale zamiast k\xf3\u0142ka s\u0142u\u017cy do wy\u015bwietlania tekstury. Do tego celu potrzebuje informacji o rotacji obiektu. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class ViewTexture implements View {\n    readonly mesh: THREE.Mesh;\n    readonly positionRotation: PositionRotation | (() => PositionRotation);\n    readonly order: number = 0;\n    rotationOffset: number = 0;\n    positionOffset: THREE.Vector2 = new THREE.Vector2();\n    newSkaleOnUpdate: () => { x: number; y: number; } = () => { return { x: 1, y: 1 } };\n    size: { width: number, height: number } = { width: 0, height: 0 };\n\n    constructor(positionRotation: PositionRotation | (() => PositionRotation), picturePath: string, size: { width: number, height: number }, order: number, repeat?: { x: number, y: number },) {\n        this.order = order || -1;\n        this.positionRotation = positionRotation;\n        this.size = size;\n\n        // clone texture beter (to not have a seam)\n        const texture = new THREE.TextureLoader().load(picturePath);\n\n        const setRepeat = (repeat: { x: number, y: number }, texture: THREE.Texture) => {\n            texture.wrapS = THREE.MirroredRepeatWrapping;\n            texture.wrapT = THREE.MirroredRepeatWrapping;\n            texture.repeat.set(repeat.x, repeat.y);\n        }\n        repeat && setRepeat(repeat, texture);\n\n        //create plane\n        const geometry = new THREE.PlaneGeometry(size.width, size.height);\n        const material = new THREE.MeshBasicMaterial({\n            map: texture,\n            transparent: true,\n            // depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n\n        //register view for rendering\n        views.addView(this)\n\n    }\n\n    update() {\n\n        const scale = this.newSkaleOnUpdate();\n        this.mesh.scale.set(scale.x, scale.y, 1);\n\n        const halfHeight = this.size.height / 4;\n        const xOffset = -(halfHeight * scale.y - halfHeight);\n\n\n        const vec = this.positionOffset.clone();\n        vec.add(new THREE.Vector2(xOffset, 0));\n        const positionRotation = this.positionRotation instanceof Function ? this.positionRotation() : this.positionRotation;\n        vec.rotateAround(new THREE.Vector2(0, 0), positionRotation.rotation.value);\n        const position = positionRotation.position.value.clone().add(vec);\n        this.mesh.position.set(position.x, position.y, this.order);\n        this.mesh.rotation.z = positionRotation.rotation.value + this.rotationOffset;\n    }\n    ...\n}\n")),(0,o.kt)("p",null,"Do konstruktora mog\u0119 przes\u0142a\u0107 referencj\u0119 na obiekt ",(0,o.kt)("inlineCode",{parentName:"p"},"PositionRotation"),", albo funkcj\u0119 kt\xf3ra to zwr\xf3ci jest to wygodne bo daj\u0119 swobod\u0119 co do sposobu wyliczenia rotacji bry\u0142y."),(0,o.kt)("p",null,"Metoda ",(0,o.kt)("inlineCode",{parentName:"p"},"onScaleUpdate")," jest wykorzystywana np. do imitowania rozci\u0105gania \u017cagli w zale\u017cno\u015bci od pr\u0119dko\u015bci wiatru.  "),(0,o.kt)("h4",{id:"triangel"},"Triangel"),(0,o.kt)("p",null,"Jest to element \u015bwiata, kt\xf3ry s\u0142u\u017cy do wyliczania rotacji i pozycji bry\u0142y stworzonej z trzech\n",(0,o.kt)("inlineCode",{parentName:"p"},"DynamicElenent")," po\u0142\u0105czonych ze sob\u0105 za pomoc\u0105 ",(0,o.kt)("inlineCode",{parentName:"p"},"SpringInteraction"),". Chocia\u017c sam model fizyki nie posiada przestrzeni rotacji (nie ma takich element\xf3w jak moment bezw\u0142adno\u015bci, czy moment si\u0142y),\nto rotacja jest symulowana. Jest wynikiem oddzia\u0142ywa\u0144 powsta\u0142ych przez ",(0,o.kt)("inlineCode",{parentName:"p"},"SpringInteraction"),". Rotacja jest wyliczana na podstawie zmiany po\u0142o\u017cenia trzech obiekt\xf3w ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamicElement")," wzgl\u0119dem siebie. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Triangle implements WorldElement {\n    readonly position0: Position;\n    readonly position1: Position;\n    readonly position2: Position;\n    readonly positionRotation: PositionRotation;\n\n    constructor(position0: Position, position1: Position, position2: Position, positionRotation: PositionRotation) {\n        this.position0 = position0;\n        this.position1 = position1;\n        this.position2 = position2;\n        this.positionRotation = positionRotation;\n        triangles.addElement(this)\n    }\n     update(): void {\n        const positionRotation = this.getPositionRotation();\n        this.positionRotation.position.value = positionRotation.position.value;\n        this.positionRotation.rotation = positionRotation.rotation;\n    }\n    private getPositionRotation(): PositionRotation {\n        const botomEdge = this.position0.value.clone().sub(this.position1.value);\n        const ortoganalToBotomEdge = new Vector2(-botomEdge.y, botomEdge.x); // rotate 90 degrees, GPT proposition\n        const rotationOfTriangle = Math.atan2(ortoganalToBotomEdge.y, ortoganalToBotomEdge.x);\n\n        const centerOfTriangle = this.position0.value.clone().add(this.position1.value).add(this.position2.value).divideScalar(3); // GPT proposition\n\n        const positionRotation = new PositionRotation(new Position(centerOfTriangle), new Rotation(rotationOfTriangle));\n        return positionRotation;\n    }\n    ...\n}\n")),(0,o.kt)("p",null,"W ten spos\xf3b uzyskuj\u0119 rotacje potrzebn\u0105 do wy\u015bwietlenia tekstury."),(0,o.kt)("h5",{id:"przyk\u0142ad"},"Przyk\u0142ad"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const position0 = new Position(new Vector2(0, 0));\nconst position1 = new Position(new Vector2(0, 100));\nconst position2 = new Position(new Vector2(100, 0));\n\nconst dynamicElement0 = new DynamicElement(position0);\nconst dynamicElement1 = new DynamicElement(position1);\nconst dynamicElement2 = new DynamicElement(position2);\n\nconst springInteraction0 = new SpringInteraction(dynamicElement0, dynamicElement1);\nconst springInteraction1 = new SpringInteraction(dynamicElement1, dynamicElement2);\nconst springInteraction2 = new SpringInteraction(dynamicElement2, dynamicElement0);\n\nconst positionRotation = new PositionRotation();\n\nconst triangle = new Triangle(position0, position1, position2, positionRotation);\n\nconst texture = new ViewTexture(positionRotation, "assets/ship.png", { width: 100, height: 100 }, 0, { x: 1, y: 1 });\n\n//dodanie pr\u0119dko\u015bci\ndynamicElement0.velocity.value = new Vector2(100, 0);\n')),(0,o.kt)("p",null,'Taka konfiguracja spowoduje wy\u015bwietlenia na ekranie poruszaj\u0105cego si\u0119 w prawo i obracaj\u0105cego si\u0119 zgodnie z ruchem wskaz\xf3wek zegara tekstury "assets/ship.png".'),(0,o.kt)("h4",{id:"fluidinteractor"},"FluidInteractor"),(0,o.kt)("p",null,"Element \u015bwiata, kt\xf3ry symuluj\u0119 mechanik\u0119 p\u0142yn\xf3w. Jest to element, kt\xf3ry sprawia \u017ce \u017cagle i ster generuj\u0105 si\u0142\u0119 nap\u0119dow\u0105."),(0,o.kt)("p",null,"Poni\u017csze grafiki prezentuj\u0105 koncepcje wyliczania si\u0142y nap\u0119dowej w symulacji:\n",(0,o.kt)("img",{src:t(3739).Z,width:"960",height:"540"}),"\n",(0,o.kt)("img",{src:t(6375).Z,width:"960",height:"540"}),"\n",(0,o.kt)("img",{src:t(4404).Z,width:"960",height:"540"}),"\n",(0,o.kt)("img",{src:t(6653).Z,width:"960",height:"540"}),"\n",(0,o.kt)("img",{src:t(655).Z,width:"960",height:"540"}),"\n",(0,o.kt)("img",{src:t(2656).Z,width:"960",height:"540"})),(0,o.kt)("p",null,"Implementacja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export class FluidInteractor implements WorldElement {\n    getNormal: () => Vector2\n    dynamicElement: DynamicElement;\n    fluid: Fluid;\n    getArea: () => number;\n    actualForce: Vector2 = new Vector2();\n\n    constructor(fluid: Fluid, normalGetter: () => Vector2, areaGetter: () => number, dynamicElement: DynamicElement) {\n\n        this.fluid = fluid;\n        this.getNormal = normalGetter;\n        this.getArea = areaGetter;\n        this.dynamicElement = dynamicElement;\n        fluidInteractors.addElement(this);\n    }\n\n    update(): void {\n        const maxFluidForce = 10000;\n        const velocity = this.fluid.velocity.clone().sub(this.dynamicElement.velocity);\n\n        const dotNormalVelocity = velocity.dot(this.getNormal());\n        const dotNormalVelocitySquared = dotNormalVelocity * dotNormalVelocity * (dotNormalVelocity > 0 ? 1 : -1);\n        const forceLength = dotNormalVelocitySquared * this.fluid.density * this.getArea();\n        const safeFluidForceLength = Math.min(Math.abs(forceLength), maxFluidForce) * (forceLength > 0 ? 1 : -1);\n\n        const fluidForce: Vector2 = this.getNormal().clone().multiplyScalar(safeFluidForceLength);\n\n        this.actualForce.set(fluidForce.x, fluidForce.y);\n        this.dynamicElement.force.add(fluidForce);\n    }\n    destroy(): void {\n        throw new Error("Method not implemented.");\n    }\n\n}\n')),(0,o.kt)("p",null,"W systemie Istniej\u0105 dwa rodzaje p\u0142yn\xf3w: ",(0,o.kt)("inlineCode",{parentName:"p"},"Wind")," i ",(0,o.kt)("inlineCode",{parentName:"p"},"Water"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'   export class Fluid implements WorldElement {\n    density: number;\n    velocity: Vector2;\n\n    constructor(density: number, velocity: Vector2) {\n        this.density = density;\n        this.velocity = velocity;\n    }\n\n    update(): void { // na razie nie mam potrzeby aktualizowania p\u0142yn\xf3w, np kierunku wiatru\n        throw new Error("Method not implemented.");\n    }\n    ...\n}\n    export const wind = new Fluid(1, new Vector2(0, 1));\n\n    const water = new Fluid(1000, new Vector2(0, 0));\n')),(0,o.kt)("p",null,"Woda jest 100 razy g\u0119stsza od powietrza, dlatego te\u017c si\u0142a nap\u0119dowa generowana przez wiatr jest 100 razy mniejsza ni\u017c si\u0142a nap\u0119dowa generowana przez wod\u0119 przy takich samych pozosta\u0142ych parametrach."),(0,o.kt)("h4",{id:"ship"},"Ship"),(0,o.kt)("p",null,"Z powy\u017cszych element\xf3w bazowych mam du\u017c\u0105 swobod\u0119 w konstruowaniu r\xf3\u017cnych obiekt\xf3w p\u0142ywaj\u0105cych. Oto implementacja statku wyst\u0119puj\u0105cego w aktualnej wersji symulacji:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Ship2 {\n    positionRotation = new PositionRotation();\n    triangle: Triangle;\n    hull = new Hull2();\n\n    sail1: Sail\n    sail2: Sail\n\n    sword: Ster;\n\n    ster: Ster;\n\n    ropes: Rope[] = []; // liny s\u0142u\u017c\u0105 do obracania \u017cagli\n\n    userInteractor: UserInteractor;\n\n    constructor() {\n        const centerY = this.hull.dynamicCollidingPolygon.centerDynamicElement.position.value.y;\n\n\n        this.sail1 = new Sail(new Vector2(200, centerY));\n        this.sail2 = new Sail(new Vector2(500, centerY));\n\n        this.hull.dynamicCollidingPolygon.connectDynamicElement(this.sail1.mast);\n        this.hull.dynamicCollidingPolygon.connectDynamicElement(this.sail2.mast);\n\n        const ropeLeftSail1 = new SpringInteraction(this.sail1.yardLeft, this.sail2.mast, 0.1, 0.1);\n        const ropeRightSail1 = new SpringInteraction(this.sail1.yardRight, this.sail2.mast, 0.1, 0.1);\n        const ropeLeftSail2 = new SpringInteraction(this.sail2.yardLeft, this.sail1.mast, 0.1, 0.1);\n        const ropeRightSail2 = new SpringInteraction(this.sail2.yardRight, this.sail1.mast, 0.1, 0.1);\n\n        this.ropes.push({ side: 'left', sail: 'front', interaction: ropeLeftSail1 });\n        this.ropes.push({ side: 'right', sail: 'front', interaction: ropeRightSail1 });\n        this.ropes.push({ side: 'left', sail: 'back', interaction: ropeLeftSail2 });\n        this.ropes.push({ side: 'right', sail: 'back', interaction: ropeRightSail2 });\n\n        this.triangle = new Triangle(this.sail1.mast.position, this.sail2.mast.position, this.hull.shapeOfFirstHalfOfShip[5], this.positionRotation);\n\n\n        this.ster = new Ster(new Position(new Vector2(60, centerY)), this.triangle);\n        this.hull.dynamicCollidingPolygon.connectDynamicElement(this.ster.dynamicElement);\n        this.ster.rotationOfSter.value = Math.PI / 8;\n\n        this.sword = new Ster(new Position(new Vector2(350, centerY)), this.triangle);\n        this.hull.dynamicCollidingPolygon.connectDynamicElement(this.sword.dynamicElement);\n\n        this.userInteractor = new UserInteractor(this.hull.dynamicCollidingPolygon.collidingPolygon);\n        ...\n    }\n    ...\n}\n")),(0,o.kt)("p",null,"Najwa\u017cniejsze Elementy Statku to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"kad\u0142ub - ",(0,o.kt)("inlineCode",{parentName:"li"},"Hull2"),"-> \u0141\u0105czy ze dob\u0105 wszystkie elementy statku"),(0,o.kt)("li",{parentName:"ul"},"\u017cagle - ",(0,o.kt)("inlineCode",{parentName:"li"},"Sail")," -> produkuj\u0105 si\u0119 nap\u0119d, kt\xf3r\u0105 przekazuja do kad\u0142uba po prze ",(0,o.kt)("inlineCode",{parentName:"li"},"SpringInteraction"),". Po\u0142\u0105czone s\u0105 z kad\u0142ubem w trzech punktach: ",(0,o.kt)("inlineCode",{parentName:"li"},"mast"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"yardLeft"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"yardRight"),", liny (",(0,o.kt)("inlineCode",{parentName:"li"},"SpirngInteraction"),") zmieniaj\u0105 swoj\u0105 d\u0142ugo\u015b\u0107 i w ten spos\xf3b obracaj\u0105 \u017cagle."),(0,o.kt)("li",{parentName:"ul"},"sword - ",(0,o.kt)("inlineCode",{parentName:"li"},"Ster")," -> obiekt kt\xf3ry jest 'przypi\u0119ty' do kad\u0142uba na \u015brodku i oddzia\u0142uje z wod\u0105, nie mo\u017ce si\u0119 obraca\u0107."),(0,o.kt)("li",{parentName:"ul"},"ster - ",(0,o.kt)("inlineCode",{parentName:"li"},"Ster")," -> obiekt kt\xf3ry jest 'przypi\u0119ty' do kad\u0142uba z ty\u0142u i mo\u017ce si\u0119 obraca\u0107.  ")),(0,o.kt)("h5",{id:"kad\u0142ub"},"Kad\u0142ub"),(0,o.kt)("p",null,"\u0141\u0105czy ze sob\u0105 wszystkie elementy statku"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Hull2 {\n\n    dynamicCollidingPolygon: DynamicCollidingPolygon;\n    shapeOfFirstHalfOfShip: Position[];\n    shapeOfSecondHalfOfShip: Position[];\n    viewTexture: ViewTexture;\n    triangle: Triangle;\n    positionRotation = new PositionRotation();\n    fluidInteractor: FluidInteractor;\n    constructor(location?: Vector2) {\n        this.shapeOfFirstHalfOfShip = [\n            new Position(new Vector2(17, 176)),\n            new Position(new Vector2(208, 205)),\n            new Position(new Vector2(362, 218)),\n            new Position(new Vector2(539, 210)),\n            new Position(new Vector2(606, 195)),\n            new Position(new Vector2(650, 167)),\n            new Position(new Vector2(672, 127)),\n        ];\n\n        this.shapeOfSecondHalfOfShip = this.shapeOfFirstHalfOfShip.map((position) => {\n            return new Position(new Vector2(position.value.x, -position.value.y + 220));\n        });\n\n        const reverserSecondhalf = this.shapeOfSecondHalfOfShip.slice().reverse();\n        const shapeOfShip = this.shapeOfFirstHalfOfShip.concat(reverserSecondhalf);\n\n        this.dynamicCollidingPolygon = new DynamicCollidingPolygon(shapeOfShip, 1000);\n\n        this.triangle = new Triangle(this.shapeOfSecondHalfOfShip[0], this.shapeOfFirstHalfOfShip[0], this.dynamicCollidingPolygon.centerDynamicElement.position, this.positionRotation);\n\n        this.viewTexture = new ViewTexture(this.positionRotation, 'kadlub.png', { width: 680, height: 220 }, 1);\n        this.viewTexture.positionOffset = new Vector2(190, 0);\n\n        this.fluidInteractor = WaterInteractor(\n            () => {\n                const normal = this.triangle.getNormal();\n                return normal;\n            },\n            () => 0.00001,\n            this.dynamicCollidingPolygon.centerDynamicElement\n        )\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"DynamicCollidingPolygon")," to klasa kt\xf3ra generuje bry\u0142\u0119 z podanych punkt\xf3w, po przez zwi\u0105zanie ich za pomoc\u0105  ",(0,o.kt)("inlineCode",{parentName:"p"},"SpringInteraction"),". Ponadto obiekt ten potrafi kolidowa\u0107 z innymi, niestety funkcjonalno\u015b\u0107 ta zosta\u0142a wy\u0142\u0105czona poniewa\u017c nie jest zbyt wydajna. Znajduje si\u0119 tutaj ju\u017c obiekt definiuj\u0105cy wygl\u0105d - zwyk\u0142a przyklejona tekstura. Model kad\u0142uba realizuje ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Soft-body_dynamics"},"soft body dynammics"),", czyli jest elastyczny. Jadnak z braku czasu nie zaimplementowa\u0142em takiego wygl\u0105du."),(0,o.kt)("h5",{id:"\u017cagiel"},"\u017bagiel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Sail {\n    yardView: ViewTexture;\n    sailView: ViewTexture;\n    positionRotation: PositionRotation;\n    triangle: Triangle;\n\n    mast: DynamicElement;\n    yardLeft: DynamicElement;\n    yardRight: DynamicElement;\n    aditionalDynamicElement: DynamicElement;\n\n    interactions: SpringInteraction[] = [];\n\n    windInteractor: FluidInteractor\n    // dynamicTriangle: DynamicTriangle;\n    sailArea = 1;\n    unfurling = 1;\n\n    constructor(position: Vector2) {\n        const width = 400;\n        const height = 50;\n        this.mast = new DynamicElement(new Position(position));\n        this.yardLeft = new DynamicElement(new Position(new Vector2(0, width / 2).add(position)));\n        this.yardRight = new DynamicElement(new Position(new Vector2(0, -width / 2).add(position)));\n\n        this.aditionalDynamicElement = new DynamicElement(new Position(new Vector2(-height, 0).add(position)));\n\n        this.interactions.push(new SpringInteraction(this.mast, this.yardLeft, 0.1, 0.1));\n        this.interactions.push(new SpringInteraction(this.mast, this.yardRight, 0.1, 0.1));\n        this.interactions.push(new SpringInteraction(this.yardLeft, this.aditionalDynamicElement, 0.1, 0.1));\n        this.interactions.push(new SpringInteraction(this.yardRight, this.aditionalDynamicElement, 0.1, 0.1));\n        this.interactions.push(new SpringInteraction(this.mast, this.aditionalDynamicElement, 0.1, 0.1));\n\n        const getNormal = () => {\n            const vectorYard = this.yardLeft.position.value.clone().sub(this.yardRight.position.value);\n            const yardPerpendicular = new Vector2(-vectorYard.y, vectorYard.x);\n            yardPerpendicular.normalize();\n            return yardPerpendicular;\n        }\n        this.windInteractor = WindInteractor(() => getNormal(), () => this.sailArea * this.unfurling, this.mast);\n\n\n        this.positionRotation = new PositionRotation();\n        this.triangle = new Triangle(this.yardLeft.position, this.yardRight.position, this.aditionalDynamicElement.position, this.positionRotation);\n\n        this.yardView = new ViewTexture(this.positionRotation, 'yard.png', { height, width }, 1);\n        this.yardView.rotationOffset = Math.PI / 2;\n        this.yardView.positionOffset = new Vector2(-height / 2, 0);\n\n\n        this.sailView = new ViewTexture(this.positionRotation, 'plutno.png', { height, width }, 3);\n        this.sailView.rotationOffset = Math.PI / 2;\n        this.sailView.positionOffset = new Vector2(-height / 2, 0);\n\n        const windForce = this.windInteractor.actualForce\n\n        this.sailView.newSkaleOnUpdate = () => {\n            return { x: 1, y: Math.cbrt((-windForce.clone().dot(getNormal()) * 50)) }\n        };\n    }\n     changeSailArea(changeUnfurling: number) {\n        this.unfurling += changeUnfurling;\n        this.unfurling = Math.min(Math.max(this.unfurling, 0), 1);\n\n        this.sailView.newSkaleOnUpdate = () => {\n            return { x: this.unfurling, y: Math.cbrt((-this.windInteractor.actualForce.clone().dot(this.triangle.getNormal()) * 50)) }\n        };\n    }\n}\n")),(0,o.kt)("p",null,"Sam \u017cagiel jest bry\u0142\u0105 zbudowan\u0105 z czterech ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamicElement")," i ",(0,o.kt)("inlineCode",{parentName:"p"},"SpringInteraction")," pomi\u0119dzy nimi. Do masztu jest doczepiony ",(0,o.kt)("inlineCode",{parentName:"p"},"FluidInteractor"),". Tekstura \u017cagla jest skalowana w zale\u017cno\u015bci od si\u0142y kt\xf3ra na niego dzia\u0142a. \u017bagiel mo\u017ce by\u0107 zwijany i rozwijany."),(0,o.kt)("h5",{id:"ster"},"Ster"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Ster {\n    dynamicElement: DynamicElement;\n    fluidInteractor: FluidInteractor;\n    triangleOfShip: Triangle;\n    rotationOfSter: Rotation = new Rotation();\n    area = 0.01;\n    view: ViewTexture;\n    constructor(position: Position, triangleOfShip: Triangle) {\n        this.triangleOfShip = triangleOfShip;\n        const positionRotation = triangleOfShip.positionRotation;\n        this.dynamicElement = new DynamicElement(position);\n\n        const getNormal = () => {\n            const shipNormal = this.triangleOfShip.getNormal();\n            const rotatedNormal = shipNormal.clone().rotateAround(new Vector2(), this.rotationOfSter.value);\n            return rotatedNormal;\n        }\n\n        this.fluidInteractor = WaterInteractor(() => getNormal(), () => this.area, this.dynamicElement);\n\n        const getPositionRotation = () => {\n            const rotation = new Rotation(this.triangleOfShip.positionRotation.rotation.value);\n            rotation.value += this.rotationOfSter.value + Math.PI / 2;\n            const position = this.dynamicElement.position;\n            return new PositionRotation(position, rotation);\n        }\n\n        this.view = new ViewTexture(getPositionRotation, 'ster.png', { width: 50, height: 10 }, 1);\n    }\n}\n")),(0,o.kt)("p",null,"Ster Jest prostszy od \u017cagla. Nie jest bry\u0142\u0105, sk\u0142ada si\u0105 z tylko jednego ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamicElement"),". Do niego jest doczepiony ",(0,o.kt)("inlineCode",{parentName:"p"},"FluidInteractor"),". Ster mo\u017ce by\u0107 obracany. Rotacja steru w przestrzeni \u015bwiata jest wyliczana na podstawie rotacji statku i rotacji steru wzgl\u0119dem statku."),(0,o.kt)("h4",{id:"collisions"},"Collisions"),(0,o.kt)("p",null,"System Posiada zaimplementowany model kolizji, jednak\u017ce nie spe\u0142nia wymaga\u0144 wydajno\u015bci, wi\u0119c nie b\u0119d\u0105 go omawia\u0142."))}d.isMDXComponent=!0},9557:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/diagram-klas-37f28b6ac13b0336e1f3dc971d1e3963.png"},3739:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/s1-cc255ac5eb4cc1740f34a35ea7a08b52.png"},6375:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/s2-fd14bff20459c0b35393b3f35293f31d.png"},4404:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/s3-acc79946f97535fc9f154766a1483457.png"},6653:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/s4-877272d7fde7e39c07c361168fbfea5b.png"},655:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/s5-3590afb53c5e718f40709f79e10bd664.png"},2656:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/s6-26847f6b922eecf02fa4900384d2a3b0.png"}}]);