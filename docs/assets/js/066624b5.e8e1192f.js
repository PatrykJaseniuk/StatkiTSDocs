"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[733],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(t),y=i,d=u["".concat(s,".").concat(y)]||u[y]||p[y]||o;return t?a.createElement(d,r(r({ref:n},m),{},{components:t})):a.createElement(d,r({ref:n},m))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7495:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const o={sidebar_position:3},r="Symulator czasu rzeczywistego",l={unversionedId:"Rozwini\u0119cie/Symulator-Czasu-rzeczysistego",id:"Rozwini\u0119cie/Symulator-Czasu-rzeczysistego",title:"Symulator czasu rzeczywistego",description:"symulator jest w\u0142a\u015bciwie automatem sko\u0144czonym , a dok\u0142adniej automatem Moor'a",source:"@site/docs/2-Rozwini\u0119cie/3-Symulator-Czasu-rzeczysistego.md",sourceDirName:"2-Rozwini\u0119cie",slug:"/Rozwini\u0119cie/Symulator-Czasu-rzeczysistego",permalink:"/StatkiTSDocs/docs/Rozwini\u0119cie/Symulator-Czasu-rzeczysistego",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-Rozwini\u0119cie/3-Symulator-Czasu-rzeczysistego.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Metodyki tworzenia oprogramowania",permalink:"/StatkiTSDocs/docs/Rozwini\u0119cie/Metodyki tworzenia oprogramowania"},next:{title:"Elementy \u015bwiata",permalink:"/StatkiTSDocs/docs/Rozwini\u0119cie/Elementy-swiata"}},s={},c=[{value:"Definicja Automatu Moor&#39;a",id:"definicja-automatu-moora",level:2},{value:"Implementacja w tym symulatorze",id:"implementacja-w-tym-symulatorze",level:2},{value:"WorldElement",id:"worldelement",level:3},{value:"Funkcja przej\u015bcia",id:"funkcja-przej\u015bcia",level:3},{value:"Stan",id:"stan",level:3}],m={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"symulator-czasu-rzeczywistego"},"Symulator czasu rzeczywistego"),(0,i.kt)("p",null,"symulator jest w\u0142a\u015bciwie ",(0,i.kt)("a",{parentName:"p",href:"https://pl.wikipedia.org/wiki/Automat_sko%C5%84czony"},"automatem sko\u0144czonym")," , a dok\u0142adniej ",(0,i.kt)("a",{parentName:"p",href:"https://pl.wikipedia.org/wiki/Automat_Moore%E2%80%99a"},"automatem Moor'a")," "),(0,i.kt)("h2",{id:"definicja-automatu-moora"},"Definicja Automatu Moor'a"),(0,i.kt)("p",null,"Automat Moore\u2019a jest to rodzaj ",(0,i.kt)("a",{parentName:"p",href:"https://pl.wikipedia.org/wiki/Deterministyczny_automat_sko%C5%84czony",title:"Deterministyczny automat sko\u0144czony"},"deterministycznego automatu sko\u0144czonego"),", reprezentowany przez uporz\u0105dkowan\u0105 sz\xf3stk\u0119:"),(0,i.kt)("p",null,"\u27e8 Z , Q , Y , \u03a6 , \u03a8 , q 0 \u27e9  "),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pl.wikipedia.org/wiki/Plik:Moore_machine-diagram.svg"},(0,i.kt)("img",{parentName:"a",src:"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Moore_machine-diagram.svg/200px-Moore_machine-diagram.svg.png",alt:"Moore machine-diagram.svg"}))),(0,i.kt)("p",null,"gdzie:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Z = { z 1 , z 2 , \u2026 , z n }  \u2013 zbi\xf3r sygna\u0142\xf3w wej\u015bciowych,"),(0,i.kt)("li",{parentName:"ul"},"Q = { q 1 , q 2 , \u2026 , q n }  \u2013 zbi\xf3r stan\xf3w wewn\u0119trznych,"),(0,i.kt)("li",{parentName:"ul"},"Y = { y 1 , y 2 , \u2026 , y n } \u2013 zbi\xf3r sygna\u0142\xf3w wyj\u015bciowych,"),(0,i.kt)("li",{parentName:"ul"},"\u03a6 \u2013 funkcja przej\u015b\u0107,  q(t+1) = \u03a6(q(t),  z(t)),"),(0,i.kt)("li",{parentName:"ul"},"\u03a8 \u2013 funkcja wyj\u015b\u0107, y ( t ) = \u03a8(q(t))  zale\u017cy tylko od stanu w kt\xf3rym znajduje si\u0119 automat,"),(0,i.kt)("li",{parentName:"ul"},"q0 \u2013 stan pocz\u0105tkowy, nale\u017cy do zbioru Q.")),(0,i.kt)("p",null,"Bardziej czytelnie mo\u017cna by przedstawi\u0107 to w kodzie jako:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface Stan {...} //zbi\xf3r stan\xf3w wewn\u0119trznych\ninterface Wejscie {...} //zbi\xf3r sygna\u0142\xf3w wej\u015bciowych\ninterface Wyjscie {...} //zbi\xf3r sygna\u0142\xf3w wyj\u015bciowych\n\nconst automatMoora = (\naktualnyStan: Stan,\nfunkcjaPrzejscia: (aktualnyStan: Stan, sygna\u0142Wejsciowy: Wejscie) => Stan,\nfunkcjaWyjscia: (aktualnyStan: Stan) => Wyjscie,\ngetWejscie: () => Wejscie,\nsetWyjscie: (wyjscie: Wyjscie) => void,\n)=>{\n//uzyskuje wejscie z zewn\u0105trz np. stan myszy\nconst sygnalWejsciowy = getWejscie(); \nconst nowyStan = funkcjaPrzejscia(aktualnyStan, sygnalWejsciowy);\nconst wyjscie = funkcjaWyjscia(nowyStan);\nsetWyjscie(wyjscie); //np. render\nreturn nowyStan;\n}\n")),(0,i.kt)("h2",{id:"implementacja-w-tym-symulatorze"},"Implementacja w tym symulatorze"),(0,i.kt)("h3",{id:"worldelement"},"WorldElement"),(0,i.kt)("p",null,"symulator jest zbudowany z obiekt\xf3w kt\xf3re implementuj\u0105 interfejs ",(0,i.kt)("inlineCode",{parentName:"p"},"WorldElement")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export interface WorldElement {\nupdate(): void;\ndestroy(): void;\n}\n")),(0,i.kt)("p",null,"metoda ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," jest wywo\u0142ywana w ka\u017cdej iteracji (funkcji przej\u015bcia). Definiuje w jaki spos\xf3b aktualizowa\u0107 dany element \u015bwiata. Np. dla klasy ",(0,i.kt)("inlineCode",{parentName:"p"},"FrictionInteraction"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"update(): void {\n// sila tarcia zalezy od predkosci wzgledem obiekt\xf3w i jest sta\u0142a\nlet velocityDeferace = this.dynamicElement2.velocity.clone().sub(this.dynamicElement1.velocity);\nlet force: Vector2 = velocityDeferace.clone().normalize().multiplyScalar(this.frictionRate);\nlet negativeForce: Vector2 = force.clone().multiplyScalar(-1);\nthis.dynamicElement1.force.add(force);\nthis.dynamicElement2.force.add(negativeForce);\n}\n")),(0,i.kt)("p",null,"Dla ka\u017cdej klasy implementuj\u0105cej ",(0,i.kt)("inlineCode",{parentName:"p"},"WorlElement")," istnieje 'kontener' tych obiekt\xf3w, kt\xf3ry jest globalnym obiektem klasy  ",(0,i.kt)("inlineCode",{parentName:"p"},"WorldElements"),". ustali\u0142em \u017ce nazwa kontenera b\u0119dzie jak nazwa klasy z literk\u0105 's' na ko\u0144cu np. dla ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicElement")," kontener to ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicElements"),". Ka\u017cda klasa z int. ",(0,i.kt)("inlineCode",{parentName:"p"},"WorldElement")," w konstruktorze dodaje si\u0119 do swojego kontenera:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class FrictionInteraction implements WorldElement {\n    dynamicElement1: DynamicElement;\n    dynamicElement2: DynamicElement;\n    frictionRate: number;\n\n    constructor(dynamicElement1: DynamicElement, dynamicElement2: DynamicElement, frictionRate: number) {\n        this.dynamicElement1 = dynamicElement1;\n        this.dynamicElement2 = dynamicElement2;\n        this.frictionRate = frictionRate;\n\n        //tutaj dodaje sie do globalnego kontenera\n        frictionInteractions.addElement(this); \n    }\n    ...\n}\n")),(0,i.kt)("p",null,"Dzieki temu \u017ce kontener jest globalny mog\u0119 w wygodny spos\xf3b tworzy\u0107 nowe obiekty, kt\xf3re s\u0105 zagnie\u017cd\u017cone w innych i nie potrzebuje przekazywa\u0107 przez nie wszystkie referencji do kontenera. W innych j\u0119zykach programowania taki kontener m\xf3g\u0142by by\u0107 atrybutem statycznym, ale w TS niema takiej mo\u017cliwo\u015bci."),(0,i.kt)("p",null,"Tak wygl\u0105da klasa ",(0,i.kt)("inlineCode",{parentName:"p"},"WorldElements"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class WorldElements {\n    protected elements: WorldElement[] = [];\n    update() {\n        this.elements.forEach((element) => {\n            element.update();\n        })\n    }\n\n    removeElement(element: WorldElement) {\n        this.elements = this.elements.filter((e) => e != element);\n    }\n\n    addElement(element: WorldElement) {\n        this.elements.push(element);\n    }\n\n    clear() {\n        this.elements = [];\n    }\n}\n")),(0,i.kt)("p",null,"Wywo\u0142anie metody ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," na obiekcie ",(0,i.kt)("inlineCode",{parentName:"p"},"WorldElements")," powoduje wywo\u0142anie metody ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," na ka\u017cdym obiekcie w kontenerze."),(0,i.kt)("h3",{id:"funkcja-przej\u015bcia"},"Funkcja przej\u015bcia"),(0,i.kt)("p",null,"Ko\u0144cowa funkcja przej\u015bcia (",(0,i.kt)("inlineCode",{parentName:"p"},"transitionFunction"),") wywo\u0142uje metod\u0119 update na ka\u017cdym kontenerze:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"private transitionFunction() {\n        const realWorldDt = 10;\n        const dt = realWorldDt * timeSpeed.value;\n        let SimulationMaximumDT = springInteractions.getSimulationMaximumDT();\n        SimulationMaximumDT = 0.3;\n        const iterations = Math.floor(dt / SimulationMaximumDT);\n\n        for (let i = 0; i < iterations; i++) {\n            userInteractors.update();\n            // this.collisionSystemDuration += mesureTime(() => collisionSystem.update(), 1);\n            // this.dynamicCollidingPolygonsDuration += mesureTime(() => dynamicCollidingPolygons.update(), 1)\n            // this.dynamicCollidingTrianglesDuration += mesureTime(() => dynamicCollindingTriangles.update(), 1);\n            // wraper mesurTime s\u0142u\u017cy do pomiaru wydajno\u015bci\n            this.springInteractionsDuration += mesureTime(() => springInteractions.update(), 1);\n            this.frictionInteractionsDuration += mesureTime(() => frictionInteractions.update(), 1);\n            this.dynamicElementsDuration += mesureTime(() => dynamicElements.update(SimulationMaximumDT), 1);\n            this.fluidInteractorsDuration += mesureTime(() => fluidInteractors.update(), 1);\n            this.trianglesDuration += mesureTime(() => triangles.update(), 1);\n            pointers.update();\n        }\n    }\n")),(0,i.kt)("p",null,"ta funkcja jest przes\u0142ana do interwa\u0142u aby by\u0142a wywo\u0142ana co 10","[ms]"," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"this.intervals.push(setInterval(() => this.transitionFunction(), 10));\n")),(0,i.kt)("h3",{id:"stan"},"Stan"),(0,i.kt)("p",null,"Stan pocz\u0105tkowy automatu/symulatora jest reprezentowany przez klas\u0119 ",(0,i.kt)("inlineCode",{parentName:"p"},"World"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class World {\n    constructor() {\n        pointer.pointer = new Pointer();\n        const windDynamicElement = new DynamicElement(new Position(), 9999999999);\n        windDynamicElement.velocity = wind.velocity;\n        const clouds = new ViewTexture(new PositionRotation(windDynamicElement.position), 'clouds.png', { height: 1000000, width: 1000000 }, 100, { x: 500, y: 500 });\n\n        const viewOcean = new ViewTexture(new PositionRotation(), 'water.jpg', { height: 1000000, width: 1000000 }, -10, { x: 500, y: 500 });\n        \n        const ship = new Ship2();\n\n        const DynameicElementOcean = new DynamicElement(new Position(), 9999999999);\n        const friction = new FrictionInteraction(ship.hull.dynamicCollidingPolygon.centerDynamicElement, DynameicElementOcean, 0.01)\n        ...\n    }\n}\n")),(0,i.kt)("p",null,"kolejne stany s\u0105 przechowywane w globalnych kontenerach (obiektach klasy ",(0,i.kt)("inlineCode",{parentName:"p"},"WorldElements"),")"))}p.isMDXComponent=!0}}]);