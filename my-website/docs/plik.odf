<h1 id="cel-projektu">Cel Projektu</h1>
<h2 id="główny-cel">Główny cel</h2>
<p>Głównym celem projektu jest stworzenie systemu informatycznego symulującego zachowanie różnych obiektów pływających o napędzie żaglowym. Użytkownik systemu będzie mógł sterować parametrami statku(ustawienie żagli, ustawienie steru itd.), natomiast system będzie w czasie rzeczywistym symulował zachowanie statku i prezentował je użytkownikowi na ekranie. Symulacja będzie realizowana w przestrzeni dwuwymiarowej. System, poprzez prostą mechanikę symulacji mam wyjaśnić użytkownikowi np. jak to się dzieje ,że statek jest w stanie ‘płynąć pod wiatr’, albo jak ustawić żagle żeby dokonać zamierzony zwrot. Celem projektu nie jest stworzenie dokładnego symulatora z zaawansowaną mechaniką płynów, lecz mocno uproszczonego, lecz wciąż prezentującego esencję działania żaglowców.</p>
<h2 id="cele-dodatkowe">Cele dodatkowe</h2>
<ul>
<li>Rozbudowa systemy w kierunku gry multiplayer.</li>
<li><h2 id="wytrenowanie-sieci-neuronowej-w-celu-sterowania-okrętem-reinforcement-machine-learning.">Wytrenowanie sieci neuronowej w celu sterowania okrętem (<a href="https://en.wikipedia.org/wiki/Reinforcement_learning">Reinforcement machine learning</a>).</h2>
<h2 id="sidebar_position-2">sidebar_position: 2</h2></li>
</ul>
<h1 id="opis-wycinka-rzeczywistości">Opis Wycinka Rzeczywistości</h1>
<h2 id="żaglowiec">Żaglowiec</h2>
<p><a href="https://pl.wikipedia.org/wiki/%C5%BBaglowiec">Żaglowiec</a> (statek żaglowy) – statek wodny o napędzie żaglowym. Jednostka pływająca, której jedynym lub podstawowym czynnikiem napędowym jest jeden lub więcej żagli. Na danej jednostce przygotowanej do żeglugi zbiór wszystkich możliwych do zastosowania na niej rodzajów żagli stanowi jej aktualne ożaglowanie, przy czym nie wszystkie rodzaje tych żagli muszą być użyte jednocześnie.</p>
<p><img src="Royal_Clipper_IV.jpg" title="Royal Clipper" /> pełnorejowiec Royal Clipper</p>
<p>Głównymi elementami umożliwiającymi poruszanie się statku są <a href="#żagiel">żagiel</a>(oddziaływający z powietrzem) i miecz(oddziaływający z wodą). Zasada działania żagla i miecza jest niemal identyczna, a w mojej symulacji będzie dokładnie taka sama.</p>
<p>Przyjrzyjmy się zatem bliżej jednemu z nich np <a href="#żagiel">żaglowi</a>.</p>
<h2 id="żagiel">Żagiel</h2>
<p><a href="https://pl.wikipedia.org/wiki/%C5%BBagiel">Żagiel</a> – rodzaj pędnika wiatrowego stosowanego do napędzania żaglowców, jachtów, bojerów, żaglowozów itd. Jest to odpowiednio ukształtowany płat tkaniny (ew. innego tworzywa) rozpięty na omasztowaniu jednostek żaglowych, stawiany fałami i kierowany szotami lub brasami (najczęściej przy użyciu lin pomocniczych). Zadaniem żagla jest wytworzenie <a href="#siła-aerodynamiczna">siły aerodynamicznej</a> napędzającej jednostkę. Zespół żagli tworzy ożaglowanie.</p>
<p>Przyjrzyjmy się temu co najważniejsze w żaglu, czyli sile aerodynamicznej ## Siła Aerodynamiczna</p>
<p><a href="https://pl.wikipedia.org/wiki/Si%C5%82a_aerodynamiczna">Siła aerodynamiczna</a> – siła wywierana na ciało przez powietrze lub inny gaz, w którym ciało jest zanurzone, będąca wynikiem ruchu ciała względem gazu. Siła wynika z dwóch przyczyn: + <a href="https://pl.wikipedia.org/wiki/Parcie_hydrostatyczne">siły parcia</a> wywołanej ciśnieniem wywieranym na powierzchnię ciała, + <a href="https://pl.wikipedia.org/wiki/Lepko%C5%9B%C4%87">siły lepkości</a>, wynikającej z tarcia wewnętrznego w płynie w pobliżu poruszającego się ciała.</p>
<p>Siła parcia działa miejscowo prostopadle do powierzchni ciała, siła lepkości działa miejscowo równolegle (ścinająco) do powierzchni. Całkowita siła aerodynamiczna działająca na ciało jest wektorową sumą tych dwóch sił scałkowaną po całej powierzchni ciała.</p>
<p><img src="presar.jpg" title="Siła aerodynamiczna" alt="marian" /> + + +</p>
<p><img src="navier-strokeEQ.gif" /></p>
<p>Wyznaczanie dokładnych ciśnień i prędkości poruszającego się gazu to skomplikowany proces. Dlatego dla wyznaczenia siły aerodynamicznej działającej na żagiel posłużę się pewnymi uproszczeniami.</p>
<h2 id="siła-aerodynamiczna-w-żeglarstwie">Siła aerodynamiczna w żeglarstwie</h2>
<p>Dążąc do określenia siły działającej na żagiel rozpatruje się następujące czynniki: + <strong>Prędkość wiatru pozornego</strong> - czyli prędkość wiatru względem żagla. Wartość siły aerodynamicznej jest wprost proporcjonalna do kwadratu prędkości wiatru pozornego. Dwukrotny wzrost prędkości wiatru oznacza wytworzenie czterokrotnie większej siły aerodynamicznej. + <strong>Powierzchnia ożaglowania</strong> - siła aerodynamiczna jest wprost proporcjonalna do powierzchni ożaglowania. + <strong>Własności aerodynamiczne ożaglowania</strong> - siła aerodynamiczna wytworzona na żaglach w znaczny sposób zależy od typu ożaglowania oraz cech konstrukcyjnych żagli takich jak: wybrzuszenie, smukłość, czy nawet rodzaj materiału. + <strong>Kąt natarcia</strong> – kąt pomiędzy kierunkiem przepływu wiatru a cięciwą żagla. Dla kursów ostrych, do prawidłowej pracy żagla, kąt natarcia powinien mieć od 10° do 20°. Dla kursów pełnych kąt natarcia jest bliski kątowi prostemu.</p>
<p><img src="si%C5%82y-aerdynamiczne-zaglowiec.png" /></p>
<p><em>Schematycznie przedstawiona siła aerodynamiczna Fae powstająca na żaglu jachtu oraz jej składowe: siła ciągu Fc i siła przechylająca Fp</em></p>
<p>Wartość siły aerodynamicznej zależy od prędkości ruchu ciała, w przybliżeniu jest proporcjonalna do kwadratu prędkości. Zależy od powierzchni ciała, jej wielkości, kształtu, ustawienia względem kierunku ruchu w gazie, dla danego kształtu i jego ustawienia w przybliżeniu jest proporcjonalna do powierzchni ciała. Jest proporcjonalna do gęstości gazu, która zależy od rodzaju gazu, jego temperatury i ciśnienia. Dla powietrza stosuje się przybliżony wzór:</p>
<pre><code>Fae = q · S · C = 0,0626 · V^2 · S · C </code></pre>
<p>gdzie: + <strong>q</strong> - ciśnienie dynamiczne, + <strong>V</strong> - prędkość ciała względem gazu, + <strong>S</strong> - powierzchnia ciała, + <strong>C</strong> - współczynnik siły aerodynamicznej. — sidebar_position: 3 —</p>
<h1 id="przegląd-podobnych-systemów-informatycznych">Przegląd Podobnych Systemów Informatycznych</h1>
<h2 id="sailway">SailWay</h2>
<p><a href="https://sailaway.world/">sailWay</a> - Realistyczny symulator żeglowania 3D. Na platformie <a href="https://store.steampowered.com/app/552920/Sailaway__The_Sailing_Simulator/">Steam</a> jest oceniony na 7/10.</p>
<h2 id="sea-of-thieves">Sea of Thieves</h2>
<p><a href="https://www.seaofthieves.com/pl">Sea of Thieves</a> - Gra akcji z otwartym światem, w której gracze wcielają się w piratów. Gra jest dostępna na platformie <a href="https://store.steampowered.com/app/1172620/Sea_of_Thieves/">Steam</a>. Jest oceniona na 9/10. Posiada zręcznościowy model żeglowania, który nie jest realistyczny (można pływać w dowolnym kierunku).</p>
<h2 id="porównanie-z-tym-projektem">Porównanie z tym projektem</h2>
<p>Ten projekt będzie realizowany w przestrzeni dwuwymiarowej, inne aplikacje/gry realizują to zagadnienie w 3D. Ten projekt ma zachować balans pomiędzy realnym odwzorowaniem mechaniki żeglowania, a grywalnością. Chcę zachować wartość edukacyjną, ale nie chcę, żeby system był zbyt skomplikowana.</p>
<h1 id="przegląd-literatury">Przegląd Literatury</h1>
<h2 id="literatura">Literatura</h2>
<h3 id="section">[1]</h3>
<p><a href="https://www.amazon.com/Physics-Sailing-Explained-Stephen-Davis/dp/1472905560">The Physics of Sailing</a></p>
<p>Książka opisuje podstawy fizyki żeglowania. Jest to dość obszerny temat, więc książka nie jest w stanie opisać wszystkiego. Opisuje podstawowe zjawiska, które występują podczas żeglowania.</p>
<h3 id="section-1">[2]</h3>
<p><a href="https://pl.annas-archive.org/md5/b2814f0513ba83a14ac91b64eef909a2">Grokking Simplicity: Taming complex software with functional thinking</a></p>
<p>Książka opisuje programowanie funkcyjne. Jest to dość obszerny temat, więc książka nie jest w stanie opisać wszystkiego. Opisuje podstawowe zjawiska, które występują podczas programowania funkcyjnego. Książka podchodzi do tematu w sposób praktyczny i demonstruje przykłady w języku JavaScript.</p>
<h3 id="section-2">[3]</h3>
<p><a href="https://pl.annas-archive.org/md5/9e397499a8cf3fd610b2cbfdfee24f37">Essential Mathematics for Games and Interactive Applications</a></p>
<p>Książka opisuje podstawowe zagadnienia potrzebne do tworzenia interaktywnych aplikacji 3D. Najważniejsze z nich to: - Algebra liniowa w praktycznym zastosowaniu - renderowanie grafiki 3D</p>
<h1 id="narzędzia-języki-programowania-biblioteki-frameworki">Narzędzia, Języki Programowania, Biblioteki, Frameworki</h1>
<h2 id="języki-programowania">Języki Programowania</h2>
<p>Język Programowania definiuje kształt pliku. Jeżeli zawartość piliku jest zrozumiała przez interpreter/kompilator jakiegoś języka to ta zawartość jest napisana w tym języku.</p>
<h3 id="typescript">TypeScript</h3>
<p><a href="https://www.typescriptlang.org/">TypeScript</a> jest to główny język tego projektu. Wybrałem właśnie ten język, ponieważ umożliwia on kompilację do JavaScript. Systemy napisane w JS posiadają najlepszą przenośność pomiędzy urządzeniami, wystarczy, że maszyna posiada przeglądarkę internetową. Kolejną zaleta TS jest obchodzenie się z funkcjami. W TS <code>function</code> jest <code>first-class citizen</code>,to znaczy, że można ją przypisywać do zmiennych/stałych przesyłać do funkcji i zwracać z funkcji tak samo wygodnie, jak dane/wartości np. <code>string</code>, <code>number</code>, <code>object</code>. Kolejną wygodną rzeczą jest <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">closure</a>, która umożliwia definiowanie funkcji w dowolnym miejscu z możliwością odwołania się do wszystkich elementów języka w przestrzeni nazw, w której zastała zdefiniowana. Wadą Systemów napisanych w JS jest np. mniejsza wydajność w porównaniu, np. do C++.</p>
<h3 id="react">React</h3>
<p><a href="https://pl.react.dev/">React</a> Nie korzystałem zbyt wiele z React w tym projekcie. Umożliwia on w wygodny sposób definiowanie wyglądu strony za pomocą drzewa komponentów React (coś jak klasy, albo funkcje), zamiast drzewa statycznych elementów html. Dzięki temu wygląd końcowy poszczególnych komponentów jest dynamiczny i zależy od różnych argumentów: np. globalny stan aplikacji, argument przesłany przez rodzica, albo odpowiedz uzyskana z zewnętrznego serwera. Pliki w języku react występuje w dwóch odmianach: <code>.jsx</code> i <code>.tsx</code>. Pierwszy jest na bazie JS, drugi na bazie TS. W tym projekcie używam tylko <code>.tsx</code>.</p>
<h3 id="jest">Jest</h3>
<p>Język testów interpretowany przez <code>Jest</code> jest na bazie TS/JS znajduje się w plikach z rozszerzeniem <code>test.ts</code></p>
<h2 id="frameworki">Frameworki</h2>
<p>Framework Definiuje kształt katalogu. Jeżeli zawartość katalogu jest zrozumiała dla interpretera danego frameworka to ten katalog jest skonstruowany w tym frameworku. Framework jest jak język programowania, ale na poziomie katalogu.</p>
<h3 id="next.js">Next.js</h3>
<p><a href="https://nextjs.org/">Next.js</a> Framework do tworzenia aplikacji webowych w React. Umożliwia on tworzenie aplikacji w sposób podobny do tworzenia aplikacji w React, ale dodaje kilka udogodnień, np. automatyczne ładowanie komponentów, które są potrzebne w danym momencie, a nie wszystkich na raz. Umożliwia on również łatwe tworzenie stron statycznych, które są ładowane szybciej niż strony dynamiczne. W tym projekcie używam Next.js do tworzenia stron statycznych. Zajmuje się też kompilacją TS do JS, oraz optymalizacją kodu JS.</p>
<h3 id="jest-1">Jest</h3>
<p><a href="https://jestjs.io/">Jest</a></p>
<h2 id="biblioteki">Biblioteki</h2>
<p>Biblioteka to użyteczny kod, który służy do określonego celu zapisany w jakimś języku programowania.</p>
<h3 id="threejs">ThreeJS</h3>
<p><a href="https://threejs.org/">ThreeJs</a> biblioteka napisana w js/ts, stanowiąca ‘wraper’ dla <a href="https://pl.wikipedia.org/wiki/WebGL">web GL</a> ,umożliwia w wygodny sposób tworzenie i manipulację elementami 3D na elemencie Canva z HTML5. Ten projekt co prawda przedstawia dwuwymiarowy model świata, ale zdecydowałem się na taką bibliotekę zamiast np <a href="https://pixijs.com/">pixiJS</a> ponieważ TJs jest bardziej popularny, posiada dużą bazę przykładów, i wbudowaną bibliotekę umożliwiającą dokonywanie operacji na wektorach.</p>
<h3 id="material-ui">Material UI</h3>
<p><a href="https://material-ui.com/">Material UI</a> Biblioteka komponentów React, która umożliwia tworzenie stron w stylu <a href="https://material.io/design">Material Design</a>.</p>
<h3 id="detect-collisions">detect-collisions</h3>
<p><a href="https://www.npmjs.com/package/detect-collisions">detect-collisions</a> To biblioteka napisana w języku TS umożliwiająca detekcję kolizji pomiędzy obiektami. Zaimplementowałem system kolizji z wykorzystaniem tej biblioteki niestety nie jest dostatecznie wydajny, więc kod który wywołuję funkcję uruchamiającą systemem kolizji jest //zakomentowany .</p>
<h2 id="narzędzia">Narzędzia</h2>
<p>Narzędzia służą do generowania i przetwarzania zawartości plików jak i całych katalogów.</p>
<h3 id="vs-code">VS Code</h3>
<p><a href="https://code.visualstudio.com/">VS Code</a> Najważniejsze narzędzie które służy do edycji zawartości plików w formie tekstowej. Ponadto posiada wbudowane, lub możliwe do dodania, interpretery różnych języków programowania, które umożliwiają wydajną prace programisty. Dzięki temu na bieżąco wiadomo gdzie występuje błąd językowy, albo do jakiej nazwy możemy się odwołać w bieżącej przestrzeni nazw. Ponadto umożliwia szybkie poruszanie się w kodzie pomiędzy odwołaniami (np z wywołania funkcji do definicji), albo dodaje możliwość refaktoryzacji kodu (np. zdefiniowanie metody, której jeszcze niema, ale już napisaliśmy do niej odwołanie).</p>
<h3 id="npm">NPM</h3>
<p><a href="https://www.npmjs.com/">npm</a> to połączenie: 1. <a href="https://en.wikipedia.org/wiki/Package_manager">menadżera pakietów</a>, który działa na maszynie dewelopera 2. serwer repozytoriów przechowujący pakiety do pobrania przez menadżera pakietów.</p>
<p>System informatyczny można przedstawić jako graf zależnych od siebie elementów (pakietów). Do poprawnego działania system potrzebuje dostępu do wszystkich elementów. Menadżer pakietów dba o to aby system posiadał wszystkie potrzebne elementy(pakiety). Potrzebne pakiety programista definiuje w pliku <code>package.json</code> . Po wywołaniu <code>npm install</code> npm doda do system (naszego katalogu) żądane pakiety i pakiety od których te pakiety zależą itd… . Dzięki temu np. nie powielają się pakiety, które już zostały pobrane.</p>
<h3 id="git">GIT</h3>
<p><a href="https://git-scm.com/">git</a> to zdecentralizowany system kontroli wersji, który pierwotnie powstał na potrzeby tworzenia i rozwoju systemu operacyjnego Linux. Jest to obecnie najbardziej popularny SKW. Pomimo że ten program jest pisany przez jedną osobę i tak jest bardzo użyteczny, ponieważ umożliwia zapisywanie stanu systemu w formie <code>commits</code> i w razie potrzeby wczytanie <code>checkout</code> poprzedniego działającego stanu. <code>commits</code> można grupować w <code>branches</code> a po osiągnięciu pożądanego rezultatu <code>branches</code> mogą być połączone ze sobą <code>merge</code>. W połączeniu z zewnętrznym serwerem współpracującym z git, mogę dokonać kopi zapasowej. Jako zewnętrzny serwer git korzystam z <a href="https://github.com/">GitHub</a> . Serwis GitHub umożliwia upublicznienie swojego repozytorium ,a także ułatwia współprace wielu osób nad jednym projektem informatycznym w ramach <a href="https://git-scm.com/about/distributed">Integration Manager Workflow</a> GitHub oprócz serwera repozytorium git posiada serwer stron statycznych i udostępnia maszynę wirtualna w ramach <a href="https://github.com/features/actions">Github Actions</a> Dzięki czemu możliwe jest zautomatyzowanie z repozytorium generowania i deponowania gotowej strony/aplikacji na ich serwerze.</p>
<pre><code>GH repozyorium --&gt; GH Actions --&gt; aplikacja dostępna w internecie </code></pre>
<h3 id="github-copilot-codex">GitHub Copilot / Codex</h3>
<p><a href="https://openai.com/blog/openai-codex">Codex</a> To <a href="https://en.wikipedia.org/wiki/Language_model">model językowy</a> zoptymalizowany pod kontem języków programowania. Korzysta z niego rozszerzenie do VS Code o nazwie <a href="https://github.com/features/copilot">GitHub CoPilot</a> . GHCP Generuje nieustannie sugestie na podstawie wcześniejszego kodu w pliku, a także na podstawie komentarzy, akceptuje się za pomocą <code>tab</code>. Jest bardzo użyteczny w sytuacji gdy korzystamy z nieznanej, ale popularnej biblioteki programistycznej (np. testy w Jest), lub chcemy napisać ciało jakiejś znanej funkcji np <code>bubbleSort(arr)</code>, ale i bardziej złożonych, albo ostylować jakiś komponent, a nie znamy <code>css</code>.</p>
<h4 id="przykłady-przydatnych-propozycji">Przykłady przydatnych propozycji:</h4>
<ul>
<li>Wyznaczenie wektora prostopadłego do danego.</li>
</ul>
<pre><code>const botomEdge = this.positions[1].value.clone().sub(this.positions[2].value);
const ortoganalToBotomEdge = new Vector2(-botomEdge.y, botomEdge.x); // GPT proposition</code></pre>
<ul>
<li>funkcja która ustawia obrót obiekt składający się z trzech punktów. Wszystko posiada specyficzną strukturę danych a mimo to model wygenerował poprawny kod za jednym zamachem.</li>
</ul>
<div class="sourceCode" id="cb4"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">//GPT proposition</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="fu">setRotation</span>(rotation<span class="op">:</span> <span class="dt">number</span>) {</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>const positionRotation <span class="op">=</span> this<span class="op">.</span><span class="fu">getPositionRotation</span>()<span class="op">;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>const rotationDifference <span class="op">=</span> rotation <span class="op">-</span> positionRotation<span class="op">.</span><span class="at">rotation</span><span class="op">;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>const rotationMatrix <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="bu">Math</span><span class="op">.</span><span class="fu">cos</span>(rotationDifference)<span class="op">,</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">sin</span>(rotationDifference))<span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">0</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="fu">sub</span>(positionRotation<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span>)<span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">1</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="fu">sub</span>(positionRotation<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span>)<span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">2</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="fu">sub</span>(positionRotation<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span>)<span class="op">;</span>  </span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">0</span>]<span class="op">.</span><span class="at">value</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(this<span class="op">.</span><span class="at">positions</span>[<span class="dv">0</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">x</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">x</span> <span class="op">-</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">0</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">y</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">y</span><span class="op">,</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">0</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">x</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">y</span> <span class="op">+</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">0</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">y</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">x</span>)<span class="op">;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">1</span>]<span class="op">.</span><span class="at">value</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(this<span class="op">.</span><span class="at">positions</span>[<span class="dv">1</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">x</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">x</span> <span class="op">-</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">1</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">y</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">y</span><span class="op">,</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">1</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">x</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">y</span> <span class="op">+</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">1</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">y</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">x</span>)<span class="op">;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">2</span>]<span class="op">.</span><span class="at">value</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(this<span class="op">.</span><span class="at">positions</span>[<span class="dv">2</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">x</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">x</span> <span class="op">-</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">2</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">y</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">y</span><span class="op">,</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">2</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">x</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">y</span> <span class="op">+</span> this<span class="op">.</span><span class="at">positions</span>[<span class="dv">2</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">y</span> <span class="op">*</span> rotationMatrix<span class="op">.</span><span class="at">x</span>)<span class="op">;</span>  </span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">0</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="fu">add</span>(positionRotation<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span>)<span class="op">;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">1</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="fu">add</span>(positionRotation<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span>)<span class="op">;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>this<span class="op">.</span><span class="at">positions</span>[<span class="dv">2</span>]<span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="fu">add</span>(positionRotation<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span>)<span class="op">;</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>}</span></code></pre></div>
<h1 id="metodyki-tworzenia-oprogramowania">Metodyki tworzenia oprogramowania</h1>
<p>W procesie powstawania oprogramowania wykorzystuje dwie metodyki: 1. <a href="https://en.wikipedia.org/wiki/Extreme_programming">eXtreme Programming, XP</a> 2. <a href="https://en.wikipedia.org/wiki/CI/CD">CI/CD</a></p>
<h2 id="extreme-programing">eXtreme Programing</h2>
<p>Ta metodyka zakłada powstawanie systemu w sposób iteracyjny, organiczny. Cel końcowy projektu nie jest bardzo ściśle określony, ewoluuje w trakcie tworzenia, jest elastyczny.</p>
<h3 id="najważniejsze-cechy">Najważniejsze cechy</h3>
<h4 id="iteratywność">Iteratywność</h4>
<p><a href="https://pl.wikipedia.org/wiki/Oprogramowanie" title="Oprogramowanie">Program</a> tworzy się w iteracjach (krótkie, przyrostowe kroki programistyczne) – i co ważniejsze – planuje tylko następną iterację. Efektem każdej iteracji (kilka tygodni) powinna być wersja programu spełniającą założenia dla danej iteracji. Następnie planuje się co zrobić dalej.</p>
<p>Odpowiada to zasadzie <a href="https://pl.wikipedia.org/wiki/Otwarte_oprogramowanie" title="Otwarte oprogramowanie">Open Source</a>: „release early, release often” (wczesne i częste wydania).</p>
<h4 id="nie-projektować-z-góry">Nie projektować z góry</h4>
<p>Nie można z góry przewidzieć, jaka architektura będzie najlepsza dla danego problemu. Dlatego należy ją tworzyć w miarę rozszerzania programu.</p>
<h4 id="testy-jednostkowe">Testy jednostkowe</h4>
<p><a href="https://pl.wikipedia.org/wiki/Test_jednostkowy" title="Test jednostkowy">Testy jednostkowe</a> pisze się zanim w ogóle zacznie się pisać kod – najlepiej na początku iteracji. Potem pisze się kod, który potrafi je wszystkie przejść. Takie testy dają zapewnienie (o ile testy są dobrze napisane), że to, co ważne, zostanie zaprojektowane, na to zaś, co nie jest ważne, programiści nie będą tracić czasu.</p>
<h4 id="ciągłe-modyfikacje-architektury">Ciągłe modyfikacje architektury</h4>
<p>Architektura nie jest czymś, czego nie wolno ruszać. Jeśli <a href="https://pl.wikipedia.org/wiki/Refactoring" title="Refactoring">modyfikacja architektury</a> ułatwi przejście danej iteracji i nie zepsuje wyników testów uzyskanych na poprzednich, należy ją wykonać. Pod tę zasadę podlega także usuwanie wszystkich znanych błędów przed rozszerzeniem funkcjonalności.</p>
<h3 id="realizacja-w-praktyce">Realizacja w praktyce</h3>
<p>W iteracyjnym procesie powstawania systemu informatycznego ważną rolę pełni system kontroli wersji. W tym projekcie korzystam z <a href="https://git-scm.com/">GIT</a>. Każda główna iteracja oznacza stworzenie nowej gałęzi(<code>branch</code>), w której nazwie znajduje się numer aktualnej iteracji (major version). Główna iteracja składa się z iteracji podrzędnych (minor version), które w git występują jako <code>commit</code> w ich nazwie występuje odpowiedni numer iteracji podrzędnej. W momencie uznania, że aktualna wersja (major version) spełnia wymagania ustalone na początku iteracji dokonuje operacji scalania <code>merge</code> aktualnej gałęzi z gałęzią główną <code>master-branch</code>. W tym momencie tworzona jest kolejna gałąź z nazwą odpowiadającą kolejnej iteracji i cykl się powtarza.</p>
<p>Pseudo kod powyższego opisu:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>let majorVersion <span class="op">=</span><span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>let minorVersion <span class="op">=</span><span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="fu">while</span>(true)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>{    </span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    git<span class="op">.</span><span class="fu">newBrach</span>(name<span class="op">:</span> majorVersion) <span class="co">//tworzę nową gałąź</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    <span class="fu">wyznaczNowyCel</span>()<span class="op">;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    <span class="fu">while</span>(<span class="op">!</span><span class="fu">czyCelZostałOsiągniety</span>())</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>    {</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>        <span class="fu">realizacjaCelu</span>()<span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>        git<span class="op">.</span><span class="fu">commit</span>(name<span class="op">:</span> minorVersion)<span class="op">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>        minorVersion<span class="op">++;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>    }</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>    git<span class="op">.</span><span class="fu">merge</span>() <span class="co">// scalanie z master</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>    minorVersion<span class="op">=</span><span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>    majorVersion<span class="op">++;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>}</span></code></pre></div>
<p>Poniższy screen obrazuje powstałą w ten sposób strukturę <code>commits</code> i <code>branches</code>. Niebieska linia przedstawia gałąź <code>master</code>, kolorami przedstawione są wszystkie gałęzie kolejnych iteracji <img src="Pasted%20image%2020230529145216.png" /> ## CI / CD</p>
<p>Jest to maksymalne zautomatyzowanie i przyspieszenie procesu przetworzenia kodu źródłowego do gotowego systemu informatycznego</p>
<h3 id="realizacja">Realizacja</h3>
<p>Wykorzystuję do tego celu dwa narzędzia: 1. framework <a href="https://vercel.com/solutions/nextjs?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=17166484775&amp;utm_campaign_id=17166484775&amp;utm_term=next%20js&amp;utm_content=134252114817_626380274875&amp;gad=1&amp;gclid=Cj0KCQjwmtGjBhDhARIsAEqfDEct38dlVJCSHtujquAFxwOD5VZQzhVdn2ePglTMclQZeyF_oUbuzEUaAhsDEALw_wcB">NextJS</a> 2. platformę <a href="https://github.com/">GitHub</a></p>
<h4 id="nextjs">NextJs</h4>
<p>Umożliwia kompilacje kodu do postaci, która może być udostępniana przez serwer przeglądarkom internetowym. Projekt jest pisany w <a href="https://www.typescriptlang.org/">TypeScript</a>, ponadto wykorzystuje komponenty <a href="https://pl.react.dev/">React</a> Ten cały kod musi zostać skompilowany do JavaScript/Html.</p>
<h4 id="github">GitHub</h4>
<p>Github jest platformą, która umożliwia: 1. hostowanie repozytorium Git &lt;- to jest najważniejsze zadanie GitHub’a 2. hostowanie statycznych stron internetowych &lt;- dokładnie tego potrzebuje w tym projekcie 3. dokonanie pewnych operacji w ramach <a href="https://github.com/features/actions">GitHub Actions</a> . To znaczy kompilację kodu źródłowego do postaci wymaganej przez serwer i przeniesienie tego (<code>deploy</code>) na serwer statycznych stron GitHub. Akcją jest wyzwalana przez jakiś triger, w tym przypadku jest to modyfikacja gałęzi <code>master</code>, to znaczy każdy <code>push</code> do tej gałęzi aktywuje akcję. Zadania w ramach akcji są zdefiniowane w repozytorium w katalogu <code>.github/workflos</code> w pliku z rozszerzenie <code>.yml</code>. Tutaj korzystam z gotowego pliku przygotowanego dla tego frameworka. #### podsumowanie Dzięki temu każde wypchnięcie gałęzi <code>master</code> na maszynie developera po krótkiej chwili skutkuję powstaniem nowej wersji aplikacji na serwerze użytkowym.</p>
<h1 id="symulator-czasu-rzeczywistego">Symulator czasu rzeczywistego</h1>
<p>symulator jest właściwie <a href="https://pl.wikipedia.org/wiki/Automat_sko%C5%84czony">automatem skończonym</a> , a dokładniej <a href="https://pl.wikipedia.org/wiki/Automat_Moore%E2%80%99a">automatem Moor’a</a></p>
<h2 id="definicja-automatu-moora">Definicja Automatu Moor’a</h2>
<p>Automat Moore’a jest to rodzaj <a href="https://pl.wikipedia.org/wiki/Deterministyczny_automat_sko%C5%84czony" title="Deterministyczny automat skończony">deterministycznego automatu skończonego</a>, reprezentowany przez uporządkowaną szóstkę:</p>
<p>⟨ Z , Q , Y , Φ , Ψ , q 0 ⟩</p>
<p><a href="https://pl.wikipedia.org/wiki/Plik:Moore_machine-diagram.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Moore_machine-diagram.svg/200px-Moore_machine-diagram.svg.png" alt="Moore machine-diagram.svg" /></a></p>
<p>gdzie:</p>
<ul>
<li>Z = { z 1 , z 2 , … , z n } – zbiór sygnałów wejściowych,</li>
<li>Q = { q 1 , q 2 , … , q n } – zbiór stanów wewnętrznych,</li>
<li>Y = { y 1 , y 2 , … , y n } – zbiór sygnałów wyjściowych,</li>
<li>Φ – funkcja przejść, q(t+1) = Φ(q(t), z(t)),</li>
<li>Ψ – funkcja wyjść, y ( t ) = Ψ(q(t)) zależy tylko od stanu w którym znajduje się automat,</li>
<li>q0 – stan początkowy, należy do zbioru Q.</li>
</ul>
<p>Bardziej czytelnie można by przedstawić to w kodzie jako:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>interface Stan {<span class="op">...</span>} <span class="co">//zbiór stanów wewnętrznych</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>interface Wejscie {<span class="op">...</span>} <span class="co">//zbiór sygnałów wejściowych</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>interface Wyjscie {<span class="op">...</span>} <span class="co">//zbiór sygnałów wyjściowych</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>const automatMoora <span class="op">=</span> (</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>aktualnyStan<span class="op">:</span> Stan<span class="op">,</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>funkcjaPrzejscia<span class="op">:</span> (aktualnyStan<span class="op">:</span> Stan<span class="op">,</span> sygnałWejsciowy<span class="op">:</span> Wejscie) <span class="kw">=&gt;</span> Stan<span class="op">,</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>funkcjaWyjscia<span class="op">:</span> (aktualnyStan<span class="op">:</span> Stan) <span class="kw">=&gt;</span> Wyjscie<span class="op">,</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>getWejscie<span class="op">:</span> () <span class="kw">=&gt;</span> Wejscie<span class="op">,</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>setWyjscie<span class="op">:</span> (wyjscie<span class="op">:</span> Wyjscie) <span class="kw">=&gt;</span> <span class="dt">void</span><span class="op">,</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>)<span class="kw">=&gt;</span>{</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a><span class="co">//uzyskuje wejscie z zewnątrz np. stan myszy</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>const sygnalWejsciowy <span class="op">=</span> <span class="fu">getWejscie</span>()<span class="op">;</span> </span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>const nowyStan <span class="op">=</span> <span class="fu">funkcjaPrzejscia</span>(aktualnyStan<span class="op">,</span> sygnalWejsciowy)<span class="op">;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>const wyjscie <span class="op">=</span> <span class="fu">funkcjaWyjscia</span>(nowyStan)<span class="op">;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a><span class="fu">setWyjscie</span>(wyjscie)<span class="op">;</span> <span class="co">//np. render</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true"></a><span class="fu">autmatMoora</span>(nowyStan<span class="op">,</span> funkcjaPrzejscia<span class="op">,</span> funkcjaWyjscia<span class="op">,</span> getWejscie<span class="op">,</span> setWyjscie)<span class="op">;</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true"></a>}</span></code></pre></div>
<h2 id="implementacja-w-tym-symulatorze">Implementacja w tym symulatorze</h2>
<h3 id="worldelement">WorldElement</h3>
<p>symulator jest zbudowany z obiektów które implementują interfejs <code>WorldElement</code></p>
<div class="sourceCode" id="cb7"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>export interface WorldElement {</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="fu">update</span>()<span class="op">:</span> <span class="dt">void</span><span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="fu">destroy</span>()<span class="op">:</span> <span class="dt">void</span><span class="op">;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>}</span></code></pre></div>
<p>metoda <code>update</code> jest wywoływana w każdej iteracji (funkcji przejścia). Definiuje w jaki sposób aktualizować dany element świata. Np. dla klasy <code>FrictionInteraction</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="fu">update</span>()<span class="op">:</span> <span class="dt">void</span> {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="co">// sila tarcia zalezy od predkosci wzgledem obiektów i jest stała</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>let velocityDeferace <span class="op">=</span> this<span class="op">.</span><span class="at">dynamicElement2</span><span class="op">.</span><span class="at">velocity</span><span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">sub</span>(this<span class="op">.</span><span class="at">dynamicElement1</span><span class="op">.</span><span class="at">velocity</span>)<span class="op">;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>let force<span class="op">:</span> Vector2 <span class="op">=</span> velocityDeferace<span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">normalize</span>()<span class="op">.</span><span class="fu">multiplyScalar</span>(this<span class="op">.</span><span class="at">frictionRate</span>)<span class="op">;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>let negativeForce<span class="op">:</span> Vector2 <span class="op">=</span> force<span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">multiplyScalar</span>(<span class="op">-</span><span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>this<span class="op">.</span><span class="at">dynamicElement1</span><span class="op">.</span><span class="at">force</span><span class="op">.</span><span class="fu">add</span>(force)<span class="op">;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>this<span class="op">.</span><span class="at">dynamicElement2</span><span class="op">.</span><span class="at">force</span><span class="op">.</span><span class="fu">add</span>(negativeForce)<span class="op">;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>}</span></code></pre></div>
<p>Dla każdej klasy implementującej <code>WorlElement</code> istnieje ‘kontener’ tych obiektów, który jest globalnym obiektem klasy <code>WorldElements</code>. ustaliłem że nazwa kontenera będzie jak nazwa klasy z literką ‘s’ na końcu np. dla <code>DynamicElement</code> kontener to <code>DynamicElements</code>. Każda klasa z int. <code>WorldElement</code> w konstruktorze dodaje się do swojego kontenera:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>export class FrictionInteraction implements WorldElement {</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>    dynamicElement1<span class="op">:</span> DynamicElement<span class="op">;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    dynamicElement2<span class="op">:</span> DynamicElement<span class="op">;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>    frictionRate<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>    <span class="kw">constructor</span>(dynamicElement1<span class="op">:</span> DynamicElement<span class="op">,</span> dynamicElement2<span class="op">:</span> DynamicElement<span class="op">,</span> frictionRate<span class="op">:</span> <span class="dt">number</span>) {</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">dynamicElement1</span> <span class="op">=</span> dynamicElement1<span class="op">;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">dynamicElement2</span> <span class="op">=</span> dynamicElement2<span class="op">;</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">frictionRate</span> <span class="op">=</span> frictionRate<span class="op">;</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a>        <span class="co">//tutaj dodaje sie do globalnego kontenera</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>        frictionInteractions<span class="op">.</span><span class="fu">addElement</span>(this)<span class="op">;</span> </span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>    }</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a>    <span class="op">...</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true"></a>}</span></code></pre></div>
<p>Dzieki temu że kontener jest globalny mogę w wygodny sposób tworzyć nowe obiekty, które są zagnieżdżone w innych i nie potrzebuje przekazywać przez nie wszystkie referencji do kontenera. W innych językach programowania taki kontener mógłby być atrybutem statycznym, ale w TS niema takiej możliwości.</p>
<p>Tak wygląda klasa <code>WorldElements</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>export class WorldElements {</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>    protected elements<span class="op">:</span> WorldElement[] <span class="op">=</span> []<span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>    <span class="fu">update</span>() {</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">elements</span><span class="op">.</span><span class="fu">forEach</span>((element) <span class="kw">=&gt;</span> {</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>            element<span class="op">.</span><span class="fu">update</span>()<span class="op">;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>        })</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>    }</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a>    <span class="fu">removeElement</span>(element<span class="op">:</span> WorldElement) {</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">elements</span> <span class="op">=</span> this<span class="op">.</span><span class="at">elements</span><span class="op">.</span><span class="fu">filter</span>((e) <span class="kw">=&gt;</span> e <span class="op">!=</span> element)<span class="op">;</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a>    }</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a>    <span class="fu">addElement</span>(element<span class="op">:</span> WorldElement) {</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">elements</span><span class="op">.</span><span class="fu">push</span>(element)<span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true"></a>    }</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true"></a>    <span class="fu">clear</span>() {</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">elements</span> <span class="op">=</span> []<span class="op">;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true"></a>    }</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true"></a>}</span></code></pre></div>
<p>Wywołanie metody <code>update</code> na obiekcie <code>WorldElements</code> powoduje wywołanie metody <code>update</code> na każdym obiekcie w kontenerze.</p>
<h3 id="funkcja-przejścia">Funkcja przejścia</h3>
<p>Końcowa funkcja przejścia (<code>transitionFunction</code>) wywołuje metodę update na każdym kontenerze:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>private <span class="fu">transitionFunction</span>() {</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>        const realWorldDt <span class="op">=</span> <span class="dv">10</span><span class="op">;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>        const dt <span class="op">=</span> realWorldDt <span class="op">*</span> timeSpeed<span class="op">.</span><span class="at">value</span><span class="op">;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>        let SimulationMaximumDT <span class="op">=</span> springInteractions<span class="op">.</span><span class="fu">getSimulationMaximumDT</span>()<span class="op">;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>        SimulationMaximumDT <span class="op">=</span> <span class="fl">0.3</span><span class="op">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a>        const iterations <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">floor</span>(dt <span class="op">/</span> SimulationMaximumDT)<span class="op">;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a>        <span class="fu">for</span> (let i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> iterations<span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>            userInteractors<span class="op">.</span><span class="fu">update</span>()<span class="op">;</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a>            <span class="co">// this.collisionSystemDuration += mesureTime(() =&gt; collisionSystem.update(), 1);</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a>            <span class="co">// this.dynamicCollidingPolygonsDuration += mesureTime(() =&gt; dynamicCollidingPolygons.update(), 1)</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a>            <span class="co">// this.dynamicCollidingTrianglesDuration += mesureTime(() =&gt; dynamicCollindingTriangles.update(), 1);</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a>            <span class="co">// wraper mesureTime służy do pomiaru wydajności</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true"></a>            this<span class="op">.</span><span class="at">springInteractionsDuration</span> <span class="op">+=</span> <span class="fu">mesureTime</span>(() <span class="kw">=&gt;</span> springInteractions<span class="op">.</span><span class="fu">update</span>()<span class="op">,</span> <span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true"></a>            this<span class="op">.</span><span class="at">frictionInteractionsDuration</span> <span class="op">+=</span> <span class="fu">mesureTime</span>(() <span class="kw">=&gt;</span> frictionInteractions<span class="op">.</span><span class="fu">update</span>()<span class="op">,</span> <span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true"></a>            this<span class="op">.</span><span class="at">dynamicElementsDuration</span> <span class="op">+=</span> <span class="fu">mesureTime</span>(() <span class="kw">=&gt;</span> dynamicElements<span class="op">.</span><span class="fu">update</span>(SimulationMaximumDT)<span class="op">,</span> <span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true"></a>            this<span class="op">.</span><span class="at">fluidInteractorsDuration</span> <span class="op">+=</span> <span class="fu">mesureTime</span>(() <span class="kw">=&gt;</span> fluidInteractors<span class="op">.</span><span class="fu">update</span>()<span class="op">,</span> <span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true"></a>            this<span class="op">.</span><span class="at">trianglesDuration</span> <span class="op">+=</span> <span class="fu">mesureTime</span>(() <span class="kw">=&gt;</span> triangles<span class="op">.</span><span class="fu">update</span>()<span class="op">,</span> <span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true"></a>            pointers<span class="op">.</span><span class="fu">update</span>()<span class="op">;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true"></a>        }</span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true"></a>    }</span></code></pre></div>
<p>ta funkcja jest przesłana do interwału aby była wywołana co 10[ms] :</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>this<span class="op">.</span><span class="at">intervals</span><span class="op">.</span><span class="fu">push</span>(<span class="fu">setInterval</span>(() <span class="kw">=&gt;</span> this<span class="op">.</span><span class="fu">transitionFunction</span>()<span class="op">,</span> <span class="dv">10</span>))<span class="op">;</span></span></code></pre></div>
<h3 id="stan">Stan</h3>
<p>Stan początkowy automatu/symulatora jest reprezentowany przez klasę <code>World</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>export class World {</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>    <span class="kw">constructor</span>() {</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>        pointer<span class="op">.</span><span class="at">pointer</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Pointer</span>()<span class="op">;</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>        const windDynamicElement <span class="op">=</span> <span class="kw">new</span> <span class="fu">DynamicElement</span>(<span class="kw">new</span> <span class="fu">Position</span>()<span class="op">,</span> <span class="dv">9999999999</span>)<span class="op">;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>        windDynamicElement<span class="op">.</span><span class="at">velocity</span> <span class="op">=</span> wind<span class="op">.</span><span class="at">velocity</span><span class="op">;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>        const clouds <span class="op">=</span> <span class="kw">new</span> <span class="fu">ViewTexture</span>(<span class="kw">new</span> <span class="fu">PositionRotation</span>(windDynamicElement<span class="op">.</span><span class="at">position</span>)<span class="op">,</span> <span class="st">&#39;clouds.png&#39;</span><span class="op">,</span> { height<span class="op">:</span> <span class="dv">1000000</span><span class="op">,</span> width<span class="op">:</span> <span class="dv">1000000</span> }<span class="op">,</span> <span class="dv">100</span><span class="op">,</span> { x<span class="op">:</span> <span class="dv">500</span><span class="op">,</span> y<span class="op">:</span> <span class="dv">500</span> })<span class="op">;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>        const viewOcean <span class="op">=</span> <span class="kw">new</span> <span class="fu">ViewTexture</span>(<span class="kw">new</span> <span class="fu">PositionRotation</span>()<span class="op">,</span> <span class="st">&#39;water.jpg&#39;</span><span class="op">,</span> { height<span class="op">:</span> <span class="dv">1000000</span><span class="op">,</span> width<span class="op">:</span> <span class="dv">1000000</span> }<span class="op">,</span> <span class="op">-</span><span class="dv">10</span><span class="op">,</span> { x<span class="op">:</span> <span class="dv">500</span><span class="op">,</span> y<span class="op">:</span> <span class="dv">500</span> })<span class="op">;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a>        </span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a>        const ship <span class="op">=</span> <span class="kw">new</span> <span class="fu">Ship2</span>()<span class="op">;</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a>        const DynameicElementOcean <span class="op">=</span> <span class="kw">new</span> <span class="fu">DynamicElement</span>(<span class="kw">new</span> <span class="fu">Position</span>()<span class="op">,</span> <span class="dv">9999999999</span>)<span class="op">;</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true"></a>        const friction <span class="op">=</span> <span class="kw">new</span> <span class="fu">FrictionInteraction</span>(ship<span class="op">.</span><span class="at">hull</span><span class="op">.</span><span class="at">dynamicCollidingPolygon</span><span class="op">.</span><span class="at">centerDynamicElement</span><span class="op">,</span> DynameicElementOcean<span class="op">,</span> <span class="fl">0.01</span>)</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true"></a>        <span class="op">...</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true"></a>    }</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true"></a>}</span></code></pre></div>
<p>kolejne stany są przechowywane w globalnych kontenerach (obiektach klasy <code>WorldElements</code>)</p>
<h1 id="elementy-świata">Elementy świata</h1>
<h2 id="świat">świat</h2>
<p><code>Elementy świata</code> posiadają referencje do innych elementów świata. Tworzą w ten sposób strukturę danych (świat). Tak wygląda diagram klas Elementów świata: <img src="diagram-klas.png" /></p>
<p>Diagram Klas nie dostarcza wystarczającej wiedzy, aby zrozumieć działanie symulatora. Należało by spojrzeć również na diagram obiektów, chociażby w stanie początkowym symulatora:</p>
<pre><code>daigram obiektów</code></pre>
<h3 id="wybrane-elementy-świata">Wybrane Elementy świata</h3>
<h4 id="position">Position</h4>
<div class="sourceCode" id="cb15"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>export class Position {</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    value<span class="op">:</span> Vector2 <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>    <span class="kw">constructor</span>(value<span class="op">:</span> Vector2 <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>)) {</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>    this<span class="op">.</span><span class="at">value</span> <span class="op">=</span> value<span class="op">;</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    }</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>}</span></code></pre></div>
<p>Pozycja jest tylko daną, nie posiada metod.</p>
<h4 id="viewpoint">ViewPoint</h4>
<div class="sourceCode" id="cb16"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>export class ViewPoint implements View {</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>    <span class="kw">readonly</span> position<span class="op">:</span> Position<span class="op">;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>    <span class="kw">readonly</span> circle<span class="op">:</span> THREE<span class="op">.</span><span class="at">Mesh</span><span class="op">;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>    <span class="kw">constructor</span>(position<span class="op">:</span> Position) {</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">position</span> <span class="op">=</span> position<span class="op">;</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a>        const geometry <span class="op">=</span> <span class="kw">new</span> THREE<span class="op">.</span><span class="fu">CircleGeometry</span>(<span class="dv">5</span><span class="op">,</span> <span class="dv">32</span>)<span class="op">;</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>        const material <span class="op">=</span> <span class="kw">new</span> THREE<span class="op">.</span><span class="fu">MeshBasicMaterial</span>({ color<span class="op">:</span> <span class="bn">0xffff00</span> })<span class="op">;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">circle</span> <span class="op">=</span> <span class="kw">new</span> THREE<span class="op">.</span><span class="fu">Mesh</span>(geometry<span class="op">,</span> material)<span class="op">;</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true"></a>        views<span class="op">.</span><span class="fu">addView</span>(this)</span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true"></a>    }</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true"></a></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true"></a></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true"></a>    <span class="fu">get3DObject</span>()<span class="op">:</span> THREE<span class="op">.</span><span class="at">Object3D</span><span class="op">&lt;</span>THREE<span class="op">.</span><span class="at">Event</span><span class="op">&gt;</span> {</span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true"></a>        return this<span class="op">.</span><span class="at">circle</span><span class="op">;</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true"></a>    }</span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true"></a>    <span class="fu">update</span>()<span class="op">:</span> <span class="dt">void</span> {</span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">circle</span><span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="fu">set</span>(this<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">x</span><span class="op">,</span> this<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="at">y</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true"></a>    }</span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true"></a>    <span class="fu">destroy</span>()<span class="op">:</span> <span class="dt">void</span> {</span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true"></a>        views<span class="op">.</span><span class="fu">removeView</span>(this)<span class="op">;</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true"></a>    }</span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true"></a>}</span></code></pre></div>
<p>Ten element przechowuje informacje potrzebne do renderowania obiektu na ekranie. <code>update</code> ‘tłumaczy’ z pozycję elementu zapisanego w formie wykorzystywanej prze inne elementy tego systemu do zrozumiałej przez <code>Three.js</code>.</p>
<h4 id="dynamicelement">DynamicElement</h4>
<div class="sourceCode" id="cb17"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a>export class DynamicElement {</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>    force <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>    mass <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>    acceleration <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>    velocity <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a>    position<span class="op">:</span> Position</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true"></a>    viewPoint<span class="op">:</span> ViewPoint <span class="co">// na potrzeby testów</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true"></a></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true"></a>    <span class="kw">constructor</span>(position<span class="op">:</span> Position<span class="op">,</span> mass<span class="op">:</span> <span class="dt">number</span> <span class="op">=</span> <span class="dv">1</span>) {</span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">mass</span> <span class="op">=</span> mass<span class="op">;</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">position</span> <span class="op">=</span> position<span class="op">;</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true"></a></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">viewPoint</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">ViewPoint</span>(position)<span class="op">;</span></span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true"></a></span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true"></a>        dynamicElements<span class="op">.</span><span class="fu">addElement</span>(this)<span class="op">;</span></span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true"></a>    }</span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true"></a></span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true"></a>    <span class="fu">update</span>(dt<span class="op">:</span> <span class="dt">number</span>) {</span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">acceleration</span> <span class="op">=</span> this<span class="op">.</span><span class="at">force</span><span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">divideScalar</span>(this<span class="op">.</span><span class="at">mass</span>)<span class="op">;</span></span>
<span id="cb17-21"><a href="#cb17-21" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">velocity</span><span class="op">.</span><span class="fu">add</span>(this<span class="op">.</span><span class="at">acceleration</span><span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">multiplyScalar</span>(dt))<span class="op">;</span></span>
<span id="cb17-22"><a href="#cb17-22" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">position</span><span class="op">.</span><span class="at">value</span><span class="op">.</span><span class="fu">add</span>(this<span class="op">.</span><span class="at">velocity</span><span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">multiplyScalar</span>(dt))<span class="op">;</span></span>
<span id="cb17-23"><a href="#cb17-23" aria-hidden="true"></a></span>
<span id="cb17-24"><a href="#cb17-24" aria-hidden="true"></a>        this<span class="op">.</span><span class="at">force</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb17-25"><a href="#cb17-25" aria-hidden="true"></a>    }</span>
<span id="cb17-26"><a href="#cb17-26" aria-hidden="true"></a></span>
<span id="cb17-27"><a href="#cb17-27" aria-hidden="true"></a>    <span class="fu">remove</span>() {</span>
<span id="cb17-28"><a href="#cb17-28" aria-hidden="true"></a>        dynamicElements<span class="op">.</span><span class="fu">removeElement</span>(this)<span class="op">;</span></span>
<span id="cb17-29"><a href="#cb17-29" aria-hidden="true"></a>    }</span>
<span id="cb17-30"><a href="#cb17-30" aria-hidden="true"></a></span>
<span id="cb17-31"><a href="#cb17-31" aria-hidden="true"></a>    <span class="fu">getMomentum</span>() {</span>
<span id="cb17-32"><a href="#cb17-32" aria-hidden="true"></a>        return this<span class="op">.</span><span class="at">velocity</span><span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">multiplyScalar</span>(this<span class="op">.</span><span class="at">mass</span>)<span class="op">;</span></span>
<span id="cb17-33"><a href="#cb17-33" aria-hidden="true"></a>    }</span>
<span id="cb17-34"><a href="#cb17-34" aria-hidden="true"></a>}</span></code></pre></div>
<p>Jest to jeden z ważniejszych elementów świata. Przechowuje on informacje o prędkości, przyspieszeniu, masie, pędzie i sile, która działa na element. metoda <code>update</code> dokonuje <a href="https://en.wikipedia.org/wiki/Numerical_integration#Reasons_for_numerical_integration">integracji numerycznej</a> <a href="https://en.wikipedia.org/wiki/Equations_of_motion">równań ruchu</a> W ten sposób oblicza nowe wartości swoich atrybutów. Ten Obiekt nie implementuje <code>WorldElements</code> ponieważ korzysta ze zmodyfikowanej metody <code>update</code> która przyjmuje argument <code>dt</code> (delta time) czyli zmiana jaka będzie użyta w integracji. Należy uważać na prawidłową wartość <code>dt</code>. Zbyt mała może spowodować problemy z wydajnością, a zbyt duża może spowodować destabilizacje modelu dynamicznego tzn. model przestanie zachowywać stałe ruchu takie jak: zachowanie pędu, czy energii w skutek czego model się ‘rozpadnie’.</p>
<h5 id="stabilność-modelu-dynamiki">Stabilność modelu dynamiki</h5>
<p>Model jest stabilny, jeżeli zachowuje pęd</p>
<p>Pęd jest stały, jeżeli <code>dt</code> jest dostatecznie małe. Istnieje takie <code>dtMax</code> poniżej, którego system jest stabilny. Jak podaje Wikipedia <code>dtMax</code> jest związane z największą częstością drgania któregokolwiek molekuła systemu. <a href="https://en.wikipedia.org/wiki/Energy_drift">Energy Drift</a></p>
<pre><code>dtMax = 2^(1/2)/omega</code></pre>
<figure>
<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2ce85b09695b0dbc73db5971451e712ed4f9f114" alt="" /><figcaption>{t&lt;{}0.225p}</figcaption>
</figure>
<p>Omega jest stała, jeżeli oddziaływania się nie zmieniają, to znaczy nie powstają i nie znikają nowe obiekty klasy <code>Interaction</code>. Omega jest równa</p>
<pre><code>omega = (k/m)^(1/2)</code></pre>
<p>gdzie: + <code>k</code> - współczynnik sprężystości + <code>m</code> - masa</p>
<p>Dla cząstek, które podlegają wielu oddziaływaniom, zsumuję współczynnik sprężystości, tak jak by sprężyny były połączone równolegle.</p>
<p>Teraz znajduję największą omegę i na jej podstawie wyznaczam <code>dtMax</code> poniżej której system jest stabilny. Ciekawe 🤔, że to działa:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="fu">test</span>(<span class="st">&#39;momentum conservation for for wsp = 2^(1/2)&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>        <span class="co">// molecular model is stable (conservation of momentum) if dt&lt; wsp /omegaMax</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>        <span class="co">// where omegaMax is the highest oscilation frequency of the molecul in the system </span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>        <span class="co">// according to Wikipedia wsp should be 2^(1/2)</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>        dynamicElement1<span class="op">.</span><span class="at">velocity</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">10</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a>        dynamicElement2<span class="op">.</span><span class="at">mass</span> <span class="op">=</span> <span class="dv">10000000</span><span class="op">;</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a>        </span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true"></a>        <span class="fu">for</span> (let i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">1000</span><span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true"></a>            interaction<span class="op">.</span><span class="at">springRate</span> <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">random</span>() <span class="op">*</span> <span class="dv">1000</span><span class="op">;</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true"></a>            dynamicElement1<span class="op">.</span><span class="at">mass</span> <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">random</span>() <span class="op">*</span> <span class="dv">1000</span><span class="op">;</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true"></a>            dynamicElement2<span class="op">.</span><span class="at">mass</span> <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">random</span>() <span class="op">*</span> <span class="dv">1000</span><span class="op">;</span></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true"></a>            dynamicElement1<span class="op">.</span><span class="at">velocity</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">10</span><span class="op">,</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">random</span>() <span class="op">*</span> <span class="dv">1000</span>)<span class="op">;</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true"></a>            let maximumDt <span class="op">=</span> <span class="fu">calculatemaximumDt</span>(interaction<span class="op">.</span><span class="at">springRate</span><span class="op">,</span> dynamicElement1<span class="op">.</span><span class="at">mass</span><span class="op">,</span> dynamicElement2<span class="op">.</span><span class="at">mass</span>)<span class="op">;</span></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true"></a>            maximumDt <span class="op">*=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true"></a>            let momentum0 <span class="op">=</span> dynamicElement1<span class="op">.</span><span class="fu">getMomentum</span>()<span class="op">.</span><span class="fu">add</span>(dynamicElement2<span class="op">.</span><span class="fu">getMomentum</span>())<span class="op">;</span></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true"></a>            <span class="fu">for</span> (let i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">10000</span><span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true"></a>                interaction<span class="op">.</span><span class="fu">update</span>()<span class="op">;</span></span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true"></a>                dynamicElementUpdater<span class="op">.</span><span class="fu">update</span>(maximumDt)<span class="op">;</span></span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true"></a>            }</span>
<span id="cb20-20"><a href="#cb20-20" aria-hidden="true"></a>            let momentum1 <span class="op">=</span> dynamicElement1<span class="op">.</span><span class="fu">getMomentum</span>()<span class="op">.</span><span class="fu">add</span>(dynamicElement2<span class="op">.</span><span class="fu">getMomentum</span>())<span class="op">;</span></span>
<span id="cb20-21"><a href="#cb20-21" aria-hidden="true"></a>            <span class="fu">expect</span>(momentum0<span class="op">.</span><span class="fu">distanceTo</span>(momentum1) <span class="op">&lt;=</span> <span class="fl">0.01</span> <span class="op">*</span> momentum0<span class="op">.</span><span class="fu">length</span>())<span class="op">.</span><span class="fu">toBeTruthy</span>()<span class="op">;</span></span>
<span id="cb20-22"><a href="#cb20-22" aria-hidden="true"></a>        }</span>
<span id="cb20-23"><a href="#cb20-23" aria-hidden="true"></a>    })<span class="op">;</span></span></code></pre></div>
<p>Jeżeli <code>maximumDt</code> pomnożę, chociaż przez <code>1.1</code> to system przestaje być stabilny. 👏</p>
<h4 id="połączenie-dynamicelement-position-viewpoint">Połączenie <code>DynamicElement</code>+ <code>Position</code>+ <code>ViewPoint</code></h4>
<p>Jeżeli połączę te trzy elementy otrzymam obiekt który może przesówać się (być przesówany?) po ekranie.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="op">...</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>const position <span class="op">=</span> <span class="kw">new</span> <span class="fu">Position</span>(<span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>))<span class="op">;</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>const dynamicElement <span class="op">=</span> <span class="kw">new</span> <span class="fu">DynamicElement</span>(position)<span class="op">;</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>const viewPoint <span class="op">=</span> <span class="kw">new</span> <span class="fu">ViewPoint</span>(position)<span class="op">;</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>dynamicElement<span class="op">.</span><span class="at">velocity</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span>(<span class="dv">1</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a><span class="op">...</span></span></code></pre></div>
<h1 id="podsumowanie">Podsumowanie</h1>
<h2 id="porównanie-pierwotnych-celów-z-osiągniętymi-rezultatami">Porównanie pierwotnych celów z osiągniętymi rezultatami</h2>
<h3 id="podstawowy-cel">Podstawowy cel</h3>
<p>Podstawowym celem projektu było stworzenie aplikacji, która będzie symulować żeglowanie. Ta aplikacja miała po przez interakcję z użytkownikiem wyjaśnić dlaczego żaglowiec potrafi Np. : - płynąć pod wiatr - pływać z prędkością większą niż prędkość wiatru</p>
<p>W tym symulatorku powyższe zjawiska zachodzą, i wynikają z zaimplementowanego modelu fizyki. Użytkownik może obserwować jak zmieniają się parametry żaglowca (np. prędkość), w zależności od ustawień żagli i steru.</p>
<p><strong>Mogę uznać że podstawowy cel został osiągnięty 👌.</strong></p>
<h3 id="dodatkowe-cele">Dodatkowe cele</h3>
<p>Dodatkowymi celami było: - rozbudowa symulatora do gry multiplayer - stworzenie modelu z wykorzystaniem uczenia maszynowego, który będzie sterował żaglowcem.</p>
<h2 id="dodatkowe-cele-nie-zostały-zrealizowane-."><strong>Dodatkowe cele nie zostały zrealizowane ❌.</strong></h2>
<h2 id="sidebar_position-2-1">sidebar_position: 2</h2>
<h1 id="dalszy-rozwój">Dalszy rozwój</h1>
<h2 id="optymalizacja-i-naprawa-wyłączonych-mechanik">Optymalizacja i naprawa wyłączonych mechanik</h2>
<p>System musi zostać zoptymalizowany ponieważ w obecnej postaci nie jest w stanie działać płynnie na słabszych komputerach. Ponadto wiele zaimplementowanych mechanik (np. cały system kolizji!) musiały zostać całkowici //zakomentowane, ponieważ były zbyt wolne.</p>
<h2 id="rozbudowa">Rozbudowa</h2>
<p>Symulator powinien zastać rozbudowany o podstawowe elementy: + Interaktywne tworzenie statków, + Losowo generowane mapy,</p>
<h2 id="realizacja-celów-dodatkowych">Realizacja celów dodatkowych</h2>
<p>W dalszej kolejności można by zrealizować niezrealizowane cele dodatkowe.</p>
